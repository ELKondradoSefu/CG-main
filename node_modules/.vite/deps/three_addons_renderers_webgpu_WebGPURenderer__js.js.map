{
  "version": 3,
  "sources": ["../../three/examples/jsm/renderers/webgpu/constants.js", "../../three/examples/jsm/renderers/webgpu/WebGPUAnimation.js", "../../three/examples/jsm/renderers/webgpu/WebGPUWeakMap.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderObject.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderObjects.js", "../../three/examples/jsm/renderers/webgpu/WebGPUAttributes.js", "../../three/examples/jsm/renderers/webgpu/WebGPUGeometries.js", "../../three/examples/jsm/renderers/webgpu/WebGPUInfo.js", "../../three/examples/jsm/renderers/webgpu/WebGPUProperties.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderPipeline.js", "../../three/examples/jsm/renderers/webgpu/WebGPUProgrammableStage.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderPipelines.js", "../../three/examples/jsm/renderers/webgpu/WebGPUComputePipelines.js", "../../three/examples/jsm/renderers/webgpu/WebGPUBindings.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderLists.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderStates.js", "../../three/examples/jsm/renderers/webgpu/WebGPUTextureUtils.js", "../../three/examples/jsm/renderers/webgpu/WebGPUTextures.js", "../../three/examples/jsm/renderers/webgpu/WebGPUBackground.js", "../../three/examples/jsm/renderers/webgpu/WebGPUBinding.js", "../../three/examples/jsm/renderers/webgpu/WebGPUBufferUtils.js", "../../three/examples/jsm/renderers/webgpu/WebGPUBuffer.js", "../../three/examples/jsm/renderers/webgpu/WebGPUUniformBuffer.js", "../../three/examples/jsm/renderers/webgpu/WebGPUUniformsGroup.js", "../../three/examples/jsm/renderers/webgpu/WebGPUUniform.js", "../../three/examples/jsm/renderers/webgpu/nodes/WebGPUNodeUniform.js", "../../three/examples/jsm/renderers/webgpu/WebGPUSampler.js", "../../three/examples/jsm/renderers/webgpu/nodes/WebGPUNodeSampler.js", "../../three/examples/jsm/renderers/webgpu/WebGPUSampledTexture.js", "../../three/examples/jsm/renderers/webgpu/nodes/WebGPUNodeSampledTexture.js", "../../three/examples/jsm/renderers/webgpu/WebGPUStorageBuffer.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderTarget.js", "../../three/examples/jsm/renderers/webgpu/nodes/WebGPUNodeBuilder.js", "../../three/examples/jsm/renderers/webgpu/nodes/WebGPUNodes.js", "../../three/examples/jsm/renderers/webgpu/WebGPUUtils.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderer.js"],
  "sourcesContent": ["export const GPUPrimitiveTopology = {\n\tPointList: 'point-list',\n\tLineList: 'line-list',\n\tLineStrip: 'line-strip',\n\tTriangleList: 'triangle-list',\n\tTriangleStrip: 'triangle-strip',\n};\n\nexport const GPUCompareFunction = {\n\tNever: 'never',\n\tLess: 'less',\n\tEqual: 'equal',\n\tLessEqual: 'less-equal',\n\tGreater: 'greater',\n\tNotEqual: 'not-equal',\n\tGreaterEqual: 'greater-equal',\n\tAlways: 'always'\n};\n\nexport const GPUStoreOp = {\n\tStore: 'store',\n\tDiscard: 'discard'\n};\n\nexport const GPULoadOp = {\n\tLoad: 'load',\n\tClear: 'clear'\n};\n\nexport const GPUFrontFace = {\n\tCCW: 'ccw',\n\tCW: 'cw'\n};\n\nexport const GPUCullMode = {\n\tNone: 'none',\n\tFront: 'front',\n\tBack: 'back'\n};\n\nexport const GPUIndexFormat = {\n\tUint16: 'uint16',\n\tUint32: 'uint32'\n};\n\nexport const GPUVertexFormat = {\n\tUint8x2: 'uint8x2',\n\tUint8x4: 'uint8x4',\n\tSint8x2: 'sint8x2',\n\tSint8x4: 'sint8x4',\n\tUnorm8x2: 'unorm8x2',\n\tUnorm8x4: 'unorm8x4',\n\tSnorm8x2: 'snorm8x2',\n\tSnorm8x4: 'snorm8x4',\n\tUint16x2: 'uint16x2',\n\tUint16x4: 'uint16x4',\n\tSint16x2: 'sint16x2',\n\tSint16x4: 'sint16x4',\n\tUnorm16x2: 'unorm16x2',\n\tUnorm16x4: 'unorm16x4',\n\tSnorm16x2: 'snorm16x2',\n\tSnorm16x4: 'snorm16x4',\n\tFloat16x2: 'float16x2',\n\tFloat16x4: 'float16x4',\n\tFloat32: 'float32',\n\tFloat32x2: 'float32x2',\n\tFloat32x3: 'float32x3',\n\tFloat32x4: 'float32x4',\n\tUint32: 'uint32',\n\tUint32x2: 'uint32x2',\n\tUint32x3: 'uint32x3',\n\tUint32x4: 'uint32x4',\n\tSint32: 'sint32',\n\tSint32x2: 'sint32x2',\n\tSint32x3: 'sint32x3',\n\tSint32x4: 'sint32x4'\n};\n\nexport const GPUTextureFormat = {\n\n\t// 8-bit formats\n\n\tR8Unorm: 'r8unorm',\n\tR8Snorm: 'r8snorm',\n\tR8Uint: 'r8uint',\n\tR8Sint: 'r8sint',\n\n\t// 16-bit formats\n\n\tR16Uint: 'r16uint',\n\tR16Sint: 'r16sint',\n\tR16Float: 'r16float',\n\tRG8Unorm: 'rg8unorm',\n\tRG8Snorm: 'rg8snorm',\n\tRG8Uint: 'rg8uint',\n\tRG8Sint: 'rg8sint',\n\n\t// 32-bit formats\n\n\tR32Uint: 'r32uint',\n\tR32Sint: 'r32sint',\n\tR32Float: 'r32float',\n\tRG16Uint: 'rg16uint',\n\tRG16Sint: 'rg16sint',\n\tRG16Float: 'rg16float',\n\tRGBA8Unorm: 'rgba8unorm',\n\tRGBA8UnormSRGB: 'rgba8unorm-srgb',\n\tRGBA8Snorm: 'rgba8snorm',\n\tRGBA8Uint: 'rgba8uint',\n\tRGBA8Sint: 'rgba8sint',\n\tBGRA8Unorm: 'bgra8unorm',\n\tBGRA8UnormSRGB: 'bgra8unorm-srgb',\n\t// Packed 32-bit formats\n\tRGB9E5UFloat: 'rgb9e5ufloat',\n\tRGB10A2Unorm: 'rgb10a2unorm',\n\tRG11B10uFloat: 'rgb10a2unorm',\n\n\t// 64-bit formats\n\n\tRG32Uint: 'rg32uint',\n\tRG32Sint: 'rg32sint',\n\tRG32Float: 'rg32float',\n\tRGBA16Uint: 'rgba16uint',\n\tRGBA16Sint: 'rgba16sint',\n\tRGBA16Float: 'rgba16float',\n\n\t// 128-bit formats\n\n\tRGBA32Uint: 'rgba32uint',\n\tRGBA32Sint: 'rgba32sint',\n\tRGBA32Float: 'rgba32float',\n\n\t// Depth and stencil formats\n\n\tStencil8: 'stencil8',\n\tDepth16Unorm: 'depth16unorm',\n\tDepth24Plus: 'depth24plus',\n\tDepth24PlusStencil8: 'depth24plus-stencil8',\n\tDepth32Float: 'depth32float',\n\n\t// 'depth32float-stencil8' extension\n\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\n\t// BC compressed formats usable if 'texture-compression-bc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tBC1RGBAUnorm: 'bc1-rgba-unorm',\n\tBC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n\tBC2RGBAUnorm: 'bc2-rgba-unorm',\n\tBC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n\tBC3RGBAUnorm: 'bc3-rgba-unorm',\n\tBC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n\tBC4RUnorm: 'bc4-r-unorm',\n\tBC4RSnorm: 'bc4-r-snorm',\n\tBC5RGUnorm: 'bc5-rg-unorm',\n\tBC5RGSnorm: 'bc5-rg-snorm',\n\tBC6HRGBUFloat: 'bc6h-rgb-ufloat',\n\tBC6HRGBFloat: 'bc6h-rgb-float',\n\tBC7RGBAUnorm: 'bc7-rgba-unorm',\n\tBC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n\n\t// ETC2 compressed formats usable if 'texture-compression-etc2' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tETC2RGB8Unorm: 'etc2-rgb8unorm',\n\tETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\n\tETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\n\tETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\n\tETC2RGBA8Unorm: 'etc2-rgba8unorm',\n\tETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\n\tEACR11Unorm: 'eac-r11unorm',\n\tEACR11Snorm: 'eac-r11snorm',\n\tEACRG11Unorm: 'eac-rg11unorm',\n\tEACRG11Snorm: 'eac-rg11snorm',\n\n\t// ASTC compressed formats usable if 'texture-compression-astc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tASTC4x4Unorm: 'astc-4x4-unorm',\n\tASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\n\tASTC5x4Unorm: 'astc-5x4-unorm',\n\tASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\n\tASTC5x5Unorm: 'astc-5x5-unorm',\n\tASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\n\tASTC6x5Unorm: 'astc-6x5-unorm',\n\tASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\n\tASTC6x6Unorm: 'astc-6x6-unorm',\n\tASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\n\tASTC8x5Unorm: 'astc-8x5-unorm',\n\tASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\n\tASTC8x6Unorm: 'astc-8x6-unorm',\n\tASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\n\tASTC8x8Unorm: 'astc-8x8-unorm',\n\tASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\n\tASTC10x5Unorm: 'astc-10x5-unorm',\n\tASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\n\tASTC10x6Unorm: 'astc-10x6-unorm',\n\tASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\n\tASTC10x8Unorm: 'astc-10x8-unorm',\n\tASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\n\tASTC10x10Unorm: 'astc-10x10-unorm',\n\tASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\n\tASTC12x10Unorm: 'astc-12x10-unorm',\n\tASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\n\tASTC12x12Unorm: 'astc-12x12-unorm',\n\tASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',\n\n};\n\nexport const GPUAddressMode = {\n\tClampToEdge: 'clamp-to-edge',\n\tRepeat: 'repeat',\n\tMirrorRepeat: 'mirror-repeat'\n};\n\nexport const GPUFilterMode = {\n\tLinear: 'linear',\n\tNearest: 'nearest'\n};\n\nexport const GPUBlendFactor = {\n\tZero: 'zero',\n\tOne: 'one',\n\tSrcColor: 'src-color',\n\tOneMinusSrcColor: 'one-minus-src-color',\n\tSrcAlpha: 'src-alpha',\n\tOneMinusSrcAlpha: 'one-minus-src-alpha',\n\tDstColor: 'dst-color',\n\tOneMinusDstColor: 'one-minus-dst-color',\n\tDstAlpha: 'dst-alpha',\n\tOneMinusDstAlpha: 'one-minus-dst-alpha',\n\tSrcAlphaSaturated: 'src-alpha-saturated',\n\tBlendColor: 'blend-color',\n\tOneMinusBlendColor: 'one-minus-blend-color'\n};\n\nexport const GPUBlendOperation = {\n\tAdd: 'add',\n\tSubtract: 'subtract',\n\tReverseSubtract: 'reverse-subtract',\n\tMin: 'min',\n\tMax: 'max'\n};\n\nexport const GPUColorWriteFlags = {\n\tNone: 0,\n\tRed: 0x1,\n\tGreen: 0x2,\n\tBlue: 0x4,\n\tAlpha: 0x8,\n\tAll: 0xF\n};\n\nexport const GPUStencilOperation = {\n\tKeep: 'keep',\n\tZero: 'zero',\n\tReplace: 'replace',\n\tInvert: 'invert',\n\tIncrementClamp: 'increment-clamp',\n\tDecrementClamp: 'decrement-clamp',\n\tIncrementWrap: 'increment-wrap',\n\tDecrementWrap: 'decrement-wrap'\n};\n\nexport const GPUBindingType = {\n\tUniformBuffer: 'uniform-buffer',\n\tStorageBuffer: 'storage-buffer',\n\tReadonlyStorageBuffer: 'readonly-storage-buffer',\n\tSampler: 'sampler',\n\tComparisonSampler: 'comparison-sampler',\n\tSampledTexture: 'sampled-texture',\n\tMultisampledTexture: 'multisampled-texture',\n\tReadonlyStorageTexture: 'readonly-storage-texture',\n\tWriteonlyStorageTexture: 'writeonly-storage-texture'\n};\n\nexport const GPUTextureDimension = {\n\tOneD: '1d',\n\tTwoD: '2d',\n\tThreeD: '3d'\n};\n\nexport const GPUTextureViewDimension = {\n\tOneD: '1d',\n\tTwoD: '2d',\n\tTwoDArray: '2d-array',\n\tCube: 'cube',\n\tCubeArray: 'cube-array',\n\tThreeD: '3d'\n};\n\nexport const GPUTextureAspect = {\n\tAll: 'all',\n\tStencilOnly: 'stencil-only',\n\tDepthOnly: 'depth-only'\n};\n\nexport const GPUInputStepMode = {\n\tVertex: 'vertex',\n\tInstance: 'instance'\n};\n\nexport const GPUFeatureName = {\n\tDepthClipControl: 'depth-clip-control',\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\tTextureCompressionBC: 'texture-compression-bc',\n\tTextureCompressionETC2: 'texture-compression-etc2',\n\tTextureCompressionASTC: 'texture-compression-astc',\n\tTimestampQuery: 'timestamp-query',\n\tIndirectFirstInstance: 'indirect-first-instance',\n\tShaderF16: 'shader-f16',\n\tRG11B10UFloat: 'rg11b10ufloat-renderable',\n\tBGRA8UNormStorage: 'bgra8unorm-storage',\n\tFloat32Filterable: 'float32-filterable'\n};\n\nexport const GPUChunkSize = 16; // size of a chunk in bytes (STD140 layout)\n\n// @TODO: Move to src/constants.js\n\nexport const BlendColorFactor = 211;\nexport const OneMinusBlendColorFactor = 212;\n", "class WebGPUAnimation {\n\n\tconstructor() {\n\n\t\tthis.nodes = null;\n\n\t\tthis.animationLoop = null;\n\t\tthis.requestId = null;\n\n\t\tthis.isAnimating = false;\n\n\t\tthis.context = self;\n\n\t}\n\n\tstart() {\n\n\t\tif ( this.isAnimating === true || this.animationLoop === null || this.nodes === null ) return;\n\n\t\tthis.isAnimating = true;\n\n\t\tconst update = ( time, frame ) => {\n\n\t\t\tthis.requestId = self.requestAnimationFrame( update );\n\n\t\t\tthis.nodes.nodeFrame.update();\n\n\t\t\tthis.animationLoop( time, frame );\n\n\t\t};\n\n\t\tthis.requestId = self.requestAnimationFrame( update );\n\n\t}\n\n\tstop() {\n\n\t\tself.cancelAnimationFrame( this.requestId );\n\n\t\tthis.isAnimating = false;\n\n\t}\n\n\tsetAnimationLoop( callback ) {\n\n\t\tthis.animationLoop = callback;\n\n\t}\n\n\tsetNodes( nodes ) {\n\n\t\tthis.nodes = nodes;\n\n\t}\n\n}\n\nexport default WebGPUAnimation;\n", "export default class WebGPUWeakMap extends WeakMap {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t}\n\n\tget( keys ) {\n\n\t\tif ( Array.isArray( keys ) ) {\n\n\t\t\tlet map = this;\n\n\t\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\n\n\t\t\t\tmap = map.get( keys[ i ] );\n\n\t\t\t\tif ( map === undefined ) return undefined;\n\n\t\t\t}\n\n\t\t\treturn map.get( keys[ keys.length - 1 ] );\n\n\t\t} else {\n\n\t\t\treturn super.get( keys );\n\n\t\t}\n\n\t}\n\n\tset( keys, value ) {\n\n\t\tif ( Array.isArray( keys ) ) {\n\n\t\t\tlet map = this;\n\n\t\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\n\n\t\t\t\tconst key = keys[ i ];\n\n\t\t\t\tif ( map.has( key ) === false ) map.set( key, new WeakMap() );\n\n\t\t\t\tmap = map.get( key );\n\n\t\t\t}\n\n\t\t\treturn map.set( keys[ keys.length - 1 ], value );\n\n\t\t} else {\n\n\t\t\treturn super.set( keys, value );\n\n\t\t}\n\n\t}\n\n\tdelete( keys ) {\n\n\t\tif ( Array.isArray( keys ) ) {\n\n\t\t\tlet map = this;\n\n\t\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\n\n\t\t\t\tmap = map.get( keys[ i ] );\n\n\t\t\t\tif ( map === undefined ) return false;\n\n\t\t\t}\n\n\t\t\treturn map.delete( keys[ keys.length - 1 ] );\n\n\t\t} else {\n\n\t\t\treturn super.delete( keys );\n\n\t\t}\n\n\t}\n\n}\n", "export default class WebGPURenderObject {\n\n\tconstructor( renderer, nodes, object, material, scene, camera, lightsNode ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\t\tthis.object = object;\n\t\tthis.material = material;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\tthis.lightsNode = lightsNode;\n\n\t\tthis.geometry = object.geometry;\n\n\t\tthis._materialVersion = - 1;\n\t\tthis._materialCacheKey = '';\n\n\t}\n\n\tgetCacheKey() {\n\n\t\tconst { material, scene, lightsNode } = this;\n\n\t\tif ( material.version !== this._materialVersion ) {\n\n\t\t\tthis._materialVersion = material.version;\n\t\t\tthis._materialCacheKey = material.customProgramCacheKey();\n\n\t\t}\n\n\t\tconst cacheKey = [];\n\n\t\tcacheKey.push( 'material:' + this._materialCacheKey );\n\t\tcacheKey.push( 'nodes:' + this.nodes.getCacheKey( scene, lightsNode ) );\n\n\t\treturn '{' + cacheKey.join( ',' ) + '}';\n\n\t}\n\n}\n", "import WebGPUWeakMap from './WebGPUWeakMap.js';\nimport WebGPURenderObject from './WebGPURenderObject.js';\n\nclass WebGPURenderObjects {\n\n\tconstructor( renderer, nodes, geometries, info ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\t\tthis.geometries = geometries;\n\t\tthis.info = info;\n\n\t\tthis.cache = new WebGPUWeakMap();\n\n\t}\n\n\tget( object, material, scene, camera, lightsNode ) {\n\n\t\tconst chainKey = [ object, material, scene, camera, lightsNode ];\n\n\t\tlet renderObject = this.cache.get( chainKey );\n\n\t\tif ( renderObject === undefined ) {\n\n\t\t\trenderObject = new WebGPURenderObject( this.renderer, this.nodes, object, material, scene, camera, lightsNode );\n\n\t\t\tthis.cache.set( chainKey, renderObject );\n\n\t\t}\n\n\t\treturn renderObject;\n\n\t}\n\n\tremove( object, material, scene, camera, lightsNode ) {\n\n\t\tthis.cache.delete( [ object, material, scene, camera, lightsNode ] );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cache = new WebGPUWeakMap();\n\t\tthis.updateMap = new WeakMap();\n\n\t}\n\n}\n\nexport default WebGPURenderObjects;\n", "class WebGPUAttributes {\n\n\tconstructor( device ) {\n\n\t\tthis.buffers = new WeakMap();\n\t\tthis.device = device;\n\n\t}\n\n\tget( attribute ) {\n\n\t\tattribute = this._getAttribute( attribute );\n\n\t\treturn this.buffers.get( attribute );\n\n\t}\n\n\tremove( attribute ) {\n\n\t\tattribute = this._getAttribute( attribute );\n\n\t\tconst data = this.buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tthis._destroyBuffers( data );\n\n\t\t\tthis.buffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tupdate( attribute, isIndex = false, usage = null ) {\n\n\t\tattribute = this._getAttribute( attribute );\n\n\t\tlet data = this.buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tif ( usage === null ) {\n\n\t\t\t\tusage = ( isIndex === true ) ? GPUBufferUsage.INDEX : GPUBufferUsage.VERTEX;\n\n\t\t\t}\n\n\t\t\tdata = this._createBuffer( attribute, usage );\n\n\t\t\tthis.buffers.set( attribute, data );\n\n\t\t} else if ( usage && usage !== data.usage ) {\n\n\t\t\tthis._destroyBuffers( data );\n\n\t\t\tdata = this._createBuffer( attribute, usage );\n\n\t\t\tthis.buffers.set( attribute, data );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tthis._writeBuffer( data.buffer, attribute );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\tasync getArrayBuffer( attribute ) {\n\n\t\tconst data = this.get( attribute );\n\t\tconst device = this.device;\n\n\t\tconst gpuBuffer = data.buffer;\n\t\tconst size = gpuBuffer.size;\n\n\t\tlet gpuReadBuffer = data.readBuffer;\n\t\tlet needsUnmap = true;\n\n\t\tif ( gpuReadBuffer === null ) {\n\n\t\t\tgpuReadBuffer = device.createBuffer( {\n\t\t\t\tlabel: attribute.name,\n\t\t\t\tsize,\n\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t} );\n\n\t\t\tneedsUnmap = false;\n\n\t\t\tdata.readBuffer = gpuReadBuffer;\n\n\t\t}\n\n\t\tconst cmdEncoder = device.createCommandEncoder( {} );\n\n\t\tcmdEncoder.copyBufferToBuffer(\n\t\t\tgpuBuffer,\n\t\t\t0,\n\t\t\tgpuReadBuffer,\n\t\t\t0,\n\t\t\tsize\n\t\t);\n\n\t\tif ( needsUnmap ) gpuReadBuffer.unmap();\n\n\t\tconst gpuCommands = cmdEncoder.finish();\n\t\tdevice.queue.submit( [ gpuCommands ] );\n\n\t\tawait gpuReadBuffer.mapAsync( GPUMapMode.READ );\n\n\t\tconst arrayBuffer = gpuReadBuffer.getMappedRange();\n\n\t\treturn arrayBuffer;\n\n\t}\n\n\t_getAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n\t_createBuffer( attribute, usage ) {\n\n\t\tconst array = attribute.array;\n\t\tconst size = array.byteLength + ( ( 4 - ( array.byteLength % 4 ) ) % 4 ); // ensure 4 byte alignment, see #20441\n\n\t\tconst buffer = this.device.createBuffer( {\n\t\t\tlabel: attribute.name,\n\t\t\tsize,\n\t\t\tusage: usage | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n\t\t\tmappedAtCreation: true\n\t\t} );\n\n\t\tnew array.constructor( buffer.getMappedRange() ).set( array );\n\n\t\tbuffer.unmap();\n\n\t\tattribute.onUploadCallback();\n\n\t\treturn {\n\t\t\tversion: attribute.version,\n\t\t\tbuffer,\n\t\t\treadBuffer: null,\n\t\t\tusage\n\t\t};\n\n\t}\n\n\t_writeBuffer( buffer, attribute ) {\n\n\t\tconst device = this.device;\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tdevice.queue.writeBuffer(\n\t\t\t\tbuffer,\n\t\t\t\t0,\n\t\t\t\tarray,\n\t\t\t\t0\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tdevice.queue.writeBuffer(\n\t\t\t\tbuffer,\n\t\t\t\t0,\n\t\t\t\tarray,\n\t\t\t\tupdateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\tupdateRange.count * array.BYTES_PER_ELEMENT\n\t\t\t);\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t_destroyBuffers( { buffer, readBuffer } ) {\n\n\t\tbuffer.destroy();\n\n\t\tif ( readBuffer !== null ) readBuffer.destroy();\n\n\t}\n\n}\n\nexport default WebGPUAttributes;\n", "import { Uint32BufferAttribute, Uint16BufferAttribute } from 'three';\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nfunction getWireframeVersion( geometry ) {\n\n\treturn ( geometry.index !== null ) ? geometry.index.version : geometry.attributes.position.version;\n\n}\n\nfunction getWireframeIndex( geometry ) {\n\n\tconst indices = [];\n\n\tconst geometryIndex = geometry.index;\n\tconst geometryPosition = geometry.attributes.position;\n\n\tif ( geometryIndex !== null ) {\n\n\t\tconst array = geometryIndex.array;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst a = array[ i + 0 ];\n\t\t\tconst b = array[ i + 1 ];\n\t\t\tconst c = array[ i + 2 ];\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = geometryPosition.array;\n\n\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\tconst a = i + 0;\n\t\t\tconst b = i + 1;\n\t\t\tconst c = i + 2;\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t}\n\n\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\tattribute.version = getWireframeVersion( geometry );\n\n\treturn attribute;\n\n}\n\nclass WebGPUGeometries {\n\n\tconstructor( attributes, properties, info ) {\n\n\t\tthis.attributes = attributes;\n\t\tthis.properties = properties;\n\t\tthis.info = info;\n\n\t\tthis.wireframes = new WeakMap();\n\t\tthis.geometryFrame = new WeakMap();\n\n\t}\n\n\thas( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\n\t\treturn this.properties.has( geometry ) && this.properties.get( geometry ).initialized === true;\n\n\t}\n\n\tupdate( renderObject ) {\n\n\t\tif ( this.has( renderObject ) === false ) this.initGeometry( renderObject );\n\n\t\tthis.updateFrameAttributes( renderObject );\n\n\t}\n\n\tinitGeometry( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\t\tconst geometryProperties = this.properties.get( geometry );\n\n\t\tgeometryProperties.initialized = true;\n\n\t\tconst dispose = () => {\n\n\t\t\tthis.info.memory.geometries --;\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.attributes.remove( index );\n\n\t\t\t}\n\n\t\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\t\tthis.attributes.remove( geometryAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\tconst wireframeAttribute = this.wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute !== undefined ) {\n\n\t\t\t\tthis.attributes.remove( wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', dispose );\n\n\t\t};\n\n\t\tthis.info.memory.geometries ++;\n\n\t\tgeometry.addEventListener( 'dispose', dispose );\n\n\t}\n\n\tupdateFrameAttributes( renderObject ) {\n\n\t\tconst frame = this.info.render.frame;\n\t\tconst geometry = renderObject.geometry;\n\n\t\tif ( this.geometryFrame.get( geometry ) !== frame ) {\n\n\t\t\tthis.updateAttributes( renderObject );\n\n\t\t\tthis.geometryFrame.set( geometry, frame );\n\n\t\t}\n\n\t}\n\n\tupdateAttributes( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tthis.attributes.update( geometryAttributes[ name ] );\n\n\t\t}\n\n\t\tconst index = this.getIndex( renderObject );\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.attributes.update( index, true );\n\n\t\t}\n\n\t}\n\n\tgetIndex( renderObject ) {\n\n\t\tconst { geometry, material } = renderObject;\n\n\t\tlet index = geometry.index;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tconst wireframes = this.wireframes;\n\n\t\t\tlet wireframeAttribute = wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute === undefined ) {\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t} else if ( wireframeAttribute.version !== getWireframeVersion( geometry ) ) {\n\n\t\t\t\tthis.attributes.remove( wireframeAttribute );\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tindex = wireframeAttribute;\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n}\n\nexport default WebGPUGeometries;\n", "class WebGPUInfo {\n\n\tconstructor() {\n\n\t\tthis.autoReset = true;\n\n\t\tthis.render = {\n\t\t\tframe: 0,\n\t\t\tdrawCalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tthis.memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t}\n\n\tupdate( object, count, instanceCount ) {\n\n\t\tthis.render.drawCalls ++;\n\n\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\tthis.render.triangles += instanceCount * ( count / 3 );\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\tthis.render.points += instanceCount * count;\n\n\t\t} else if ( object.isLineSegments ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count / 2 );\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count - 1 );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPUInfo: Unknown object type.' );\n\n\t\t}\n\n\t}\n\n\treset() {\n\n\t\tthis.render.frame ++;\n\t\tthis.render.drawCalls = 0;\n\t\tthis.render.triangles = 0;\n\t\tthis.render.points = 0;\n\t\tthis.render.lines = 0;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.reset();\n\n\t\tthis.render.frame = 0;\n\n\t\tthis.memory.geometries = 0;\n\t\tthis.memory.textures = 0;\n\n\t}\n\n}\n\n\nexport default WebGPUInfo;\n", "class WebGPUProperties {\n\n\tconstructor() {\n\n\t\tthis.properties = new WeakMap();\n\n\t}\n\n\tget( object ) {\n\n\t\tlet map = this.properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.properties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tremove( object ) {\n\n\t\tthis.properties.delete( object );\n\n\t}\n\n\thas( object ) {\n\n\t\treturn this.properties.has( object );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.properties = new WeakMap();\n\n\t}\n\n}\n\nexport default WebGPUProperties;\n", "import { GPUIndexFormat, GPUCompareFunction, GPUFrontFace, GPUCullMode, GPUBlendFactor, GPUBlendOperation, BlendColorFactor, OneMinusBlendColorFactor, GPUColorWriteFlags, GPUStencilOperation, GPUInputStepMode } from './constants.js';\nimport {\n\tFloat16BufferAttribute,\n\tFrontSide, BackSide, DoubleSide,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth,\n\tNeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc,\n\tKeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp,\n\tNoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending,\n\tAddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation,\n\tZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor\n} from 'three';\n\nconst typedArraysToVertexFormatPrefix = new Map( [\n\t[ Int8Array, [ 'sint8', 'snorm8' ]],\n\t[ Uint8Array, [ 'uint8', 'unorm8' ]],\n\t[ Int16Array, [ 'sint16', 'snorm16' ]],\n\t[ Uint16Array, [ 'uint16', 'unorm16' ]],\n\t[ Int32Array, [ 'sint32', 'snorm32' ]],\n\t[ Uint32Array, [ 'uint32', 'unorm32' ]],\n\t[ Float32Array, [ 'float32', ]],\n] );\n\nconst typedAttributeToVertexFormatPrefix = new Map( [\n\t[ Float16BufferAttribute, [ 'float16', ]],\n] );\n\nconst typeArraysToVertexFormatPrefixForItemSize1 = new Map( [\n\t[ Int32Array, 'sint32' ],\n\t[ Uint32Array, 'uint32' ],\n\t[ Float32Array, 'float32' ]\n] );\n\nclass WebGPURenderPipeline {\n\n\tconstructor( device, utils ) {\n\n\t\tthis.cacheKey = null;\n\t\tthis.shaderAttributes = null;\n\t\tthis.stageVertex = null;\n\t\tthis.stageFragment = null;\n\t\tthis.usedTimes = 0;\n\n\t\tthis._device = device;\n\t\tthis._utils = utils;\n\n\t}\n\n\tinit( cacheKey, stageVertex, stageFragment, renderObject, nodeBuilder ) {\n\n\t\tconst { object, material, geometry } = renderObject;\n\n\t\t// determine shader attributes\n\n\t\tconst shaderAttributes = this._getShaderAttributes( nodeBuilder, geometry );\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = [];\n\n\t\tfor ( const attribute of shaderAttributes ) {\n\n\t\t\tconst name = attribute.name;\n\t\t\tconst geometryAttribute = geometry.getAttribute( name );\n\t\t\tconst stepMode = ( geometryAttribute !== undefined && geometryAttribute.isInstancedBufferAttribute ) ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\tvertexBuffers.push( {\n\t\t\t\tarrayStride: attribute.arrayStride,\n\t\t\t\tattributes: [ { shaderLocation: attribute.slot, offset: attribute.offset, format: attribute.format } ],\n\t\t\t\tstepMode: stepMode\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.shaderAttributes = shaderAttributes;\n\t\tthis.stageVertex = stageVertex;\n\t\tthis.stageFragment = stageFragment;\n\n\t\t// blending\n\n\t\tlet alphaBlend = {};\n\t\tlet colorBlend = {};\n\n\t\tif ( material.transparent === true && material.blending !== NoBlending ) {\n\n\t\t\talphaBlend = this._getAlphaBlend( material );\n\t\t\tcolorBlend = this._getColorBlend( material );\n\n\t\t}\n\n\t\t// stencil\n\n\t\tlet stencilFront = {};\n\n\t\tif ( material.stencilWrite === true ) {\n\n\t\t\tstencilFront = {\n\t\t\t\tcompare: this._getStencilCompare( material ),\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\n\t\tconst depthCompare = this._getDepthCompare( material );\n\t\tconst colorFormat = this._utils.getCurrentColorFormat();\n\t\tconst depthStencilFormat = this._utils.getCurrentDepthStencilFormat();\n\t\tconst sampleCount = this._utils.getSampleCount();\n\n\t\tthis.pipeline = this._device.createRenderPipeline( {\n\t\t\tvertex: Object.assign( {}, stageVertex.stage, { buffers: vertexBuffers } ),\n\t\t\tfragment: Object.assign( {}, stageFragment.stage, { targets: [ {\n\t\t\t\tformat: colorFormat,\n\t\t\t\tblend: {\n\t\t\t\t\talpha: alphaBlend,\n\t\t\t\t\tcolor: colorBlend\n\t\t\t\t},\n\t\t\t\twriteMask: colorWriteMask\n\t\t\t} ] } ),\n\t\t\tprimitive: primitiveState,\n\t\t\tdepthStencil: {\n\t\t\t\tformat: depthStencilFormat,\n\t\t\t\tdepthWriteEnabled: material.depthWrite,\n\t\t\t\tdepthCompare: depthCompare,\n\t\t\t\tstencilFront: stencilFront,\n\t\t\t\tstencilBack: {}, // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n\t\t\t\tstencilReadMask: material.stencilFuncMask,\n\t\t\t\tstencilWriteMask: material.stencilWriteMask\n\t\t\t},\n\t\t\tmultisample: {\n\t\t\t\tcount: sampleCount\n\t\t\t},\n\t\t\tlayout: 'auto'\n\t\t} );\n\n\t}\n\n\t_getAlphaBlend( material ) {\n\n\t\tconst blending = material.blending;\n\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\tlet alphaBlend = undefined;\n\n\t\tswitch ( blending ) {\n\n\t\t\tcase NormalBlending:\n\n\t\t\t\tif ( premultipliedAlpha === false ) {\n\n\t\t\t\t\talphaBlend = {\n\t\t\t\t\t\tsrcFactor: GPUBlendFactor.One,\n\t\t\t\t\t\tdstFactor: GPUBlendFactor.OneMinusSrcAlpha,\n\t\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase AdditiveBlending:\n\n\t\t\t\talphaBlend = {\n\t\t\t\t\tsrcFactor: GPUBlendFactor.Zero,\n\t\t\t\t\tdstFactor: GPUBlendFactor.One,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractiveBlending:\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\talphaBlend = {\n\t\t\t\t\t\tsrcFactor: GPUBlendFactor.OneMinusSrcColor,\n\t\t\t\t\t\tdstFactor: GPUBlendFactor.OneMinusSrcAlpha,\n\t\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase MultiplyBlending:\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\talphaBlend = {\n\t\t\t\t\t\tsrcFactor: GPUBlendFactor.Zero,\n\t\t\t\t\t\tdstFactor: GPUBlendFactor.SrcAlpha,\n\t\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase CustomBlending:\n\n\t\t\t\tconst blendSrcAlpha = material.blendSrcAlpha;\n\t\t\t\tconst blendDstAlpha = material.blendDstAlpha;\n\t\t\t\tconst blendEquationAlpha = material.blendEquationAlpha;\n\n\t\t\t\tif ( blendSrcAlpha !== null && blendDstAlpha !== null && blendEquationAlpha !== null ) {\n\n\t\t\t\t\talphaBlend = {\n\t\t\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\n\t\t\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\n\t\t\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blending not supported.', blending );\n\n\t\t}\n\n\t\treturn alphaBlend;\n\n\t}\n\n\t_getBlendFactor( blend ) {\n\n\t\tlet blendFactor;\n\n\t\tswitch ( blend ) {\n\n\t\t\tcase ZeroFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase OneFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.One;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcColor;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcColor;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase DstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstColor;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstColor;\n\t\t\t\tbreak;\n\n\t\t\tcase DstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaSaturateFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.BlendColor;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusBlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusBlendColor;\n\t\t\t\tbreak;\n\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\n\n\t\t}\n\n\t\treturn blendFactor;\n\n\t}\n\n\t_getBlendOperation( blendEquation ) {\n\n\t\tlet blendOperation;\n\n\t\tswitch ( blendEquation ) {\n\n\t\t\tcase AddEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\n\t\t\t\tbreak;\n\n\t\t\tcase ReverseSubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\n\t\t\t\tbreak;\n\n\t\t\tcase MinEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\n\t\t\t\tbreak;\n\n\t\t\tcase MaxEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend equation not supported.', blendEquation );\n\n\t\t}\n\n\t\treturn blendOperation;\n\n\t}\n\n\t_getColorBlend( material ) {\n\n\t\tconst blending = material.blending;\n\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\tconst colorBlend = {\n\t\t\tsrcFactor: null,\n\t\t\tdstFactor: null,\n\t\t\toperation: null\n\t\t};\n\n\t\tswitch ( blending ) {\n\n\t\t\tcase NormalBlending:\n\t\t\t\tcolorBlend.srcFactor = ( premultipliedAlpha === true ) ? GPUBlendFactor.One : GPUBlendFactor.SrcAlpha;\n\t\t\t\tcolorBlend.dstFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase AdditiveBlending:\n\t\t\t\tcolorBlend.srcFactor = ( premultipliedAlpha === true ) ? GPUBlendFactor.One : GPUBlendFactor.SrcAlpha;\n\t\t\t\tcolorBlend.dstFactor = GPUBlendFactor.One;\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractiveBlending:\n\t\t\t\tcolorBlend.srcFactor = GPUBlendFactor.Zero;\n\t\t\t\tcolorBlend.dstFactor = ( premultipliedAlpha === true ) ? GPUBlendFactor.Zero : GPUBlendFactor.OneMinusSrcColor;\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase MultiplyBlending:\n\t\t\t\tcolorBlend.srcFactor = GPUBlendFactor.Zero;\n\t\t\t\tcolorBlend.dstFactor = GPUBlendFactor.SrcColor;\n\t\t\t\tcolorBlend.operation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase CustomBlending:\n\t\t\t\tcolorBlend.srcFactor = this._getBlendFactor( material.blendSrc );\n\t\t\t\tcolorBlend.dstFactor = this._getBlendFactor( material.blendDst );\n\t\t\t\tcolorBlend.operation = this._getBlendOperation( material.blendEquation );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blending not supported.', blending );\n\n\t\t}\n\n\t\treturn colorBlend;\n\n\t}\n\n\t_getColorWriteMask( material ) {\n\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n\n\t}\n\n\t_getDepthCompare( material ) {\n\n\t\tlet depthCompare;\n\n\t\tif ( material.depthTest === false ) {\n\n\t\t\tdepthCompare = GPUCompareFunction.Always;\n\n\t\t} else {\n\n\t\t\tconst depthFunc = material.depthFunc;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid depth function.', depthFunc );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn depthCompare;\n\n\t}\n\n\t_getPrimitiveState( object, geometry, material ) {\n\n\t\tconst descriptor = {};\n\n\t\tdescriptor.topology = this._utils.getPrimitiveTopology( object, material );\n\n\t\tif ( object.isLine === true && object.isLineSegments !== true ) {\n\n\t\t\tconst count = ( geometry.index ) ? geometry.index.count : geometry.attributes.position.count;\n\t\t\tdescriptor.stripIndexFormat = ( count > 65535 ) ? GPUIndexFormat.Uint32 : GPUIndexFormat.Uint16; // define data type for primitive restart value\n\n\t\t}\n\n\t\tswitch ( material.side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\n\t\t\t\tbreak;\n\n\t\t\tcase BackSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\n\t\t\t\tbreak;\n\n\t\t\tcase DoubleSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Unknown Material.side value.', material.side );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t_getStencilCompare( material ) {\n\n\t\tlet stencilCompare;\n\n\t\tconst stencilFunc = material.stencilFunc;\n\n\t\tswitch ( stencilFunc ) {\n\n\t\t\tcase NeverStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\n\t\t\t\tbreak;\n\n\t\t\tcase AlwaysStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\n\t\t\t\tbreak;\n\n\t\t\tcase LessStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\n\t\t\t\tbreak;\n\n\t\t\tcase LessEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase EqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\n\t\t\t\tbreak;\n\n\t\t\tcase NotEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\n\n\t\t}\n\n\t\treturn stencilCompare;\n\n\t}\n\n\t_getStencilOperation( op ) {\n\n\t\tlet stencilOperation;\n\n\t\tswitch ( op ) {\n\n\t\t\tcase KeepStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\n\t\t\t\tbreak;\n\n\t\t\tcase ZeroStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase ReplaceStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\n\t\t\t\tbreak;\n\n\t\t\tcase InvertStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\n\n\t\t}\n\n\t\treturn stencilOperation;\n\n\t}\n\n\t_getVertexFormat( geometryAttribute ) {\n\n\t\tconst { itemSize, normalized } = geometryAttribute;\n\t\tconst ArrayType = geometryAttribute.array.constructor;\n\t\tconst AttributeType = geometryAttribute.constructor;\n\n\t\tlet format;\n\n\t\tif ( itemSize == 1 ) {\n\n\t\t\tformat = typeArraysToVertexFormatPrefixForItemSize1.get( ArrayType );\n\n\t\t} else {\n\n\t\t\tconst prefixOptions = typedAttributeToVertexFormatPrefix.get( AttributeType ) || typedArraysToVertexFormatPrefix.get( ArrayType );\n\t\t\tconst prefix = prefixOptions[ normalized ? 1 : 0 ];\n\n\t\t\tif ( prefix ) {\n\n\t\t\t\tconst bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;\n\t\t\t\tconst paddedBytesPerUnit = Math.floor( ( bytesPerUnit + 3 ) / 4 ) * 4;\n\t\t\t\tconst paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;\n\n\t\t\t\tif ( paddedItemSize % 1 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGPURenderer: Bad vertex format item size.' );\n\n\t\t\t\t}\n\n\t\t\t\tformat = `${prefix}x${paddedItemSize}`;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! format ) {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Vertex format not supported yet.' );\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t_getShaderAttributes( nodeBuilder, geometry ) {\n\n\t\tconst nodeAttributes = nodeBuilder.attributes;\n\t\tconst attributes = [];\n\n\t\tfor ( let slot = 0; slot < nodeAttributes.length; slot ++ ) {\n\n\t\t\tconst nodeAttribute = nodeAttributes[ slot ];\n\t\t\tconst name = nodeAttribute.name;\n\n\t\t\tconst geometryAttribute = geometry.getAttribute( name );\n\t\t\tconst bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;\n\n\t\t\tconst format = this._getVertexFormat( geometryAttribute );\n\n\t\t\tlet arrayStride = geometryAttribute.itemSize * bytesPerElement;\n\t\t\tlet offset = 0;\n\n\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\t// @TODO: It can be optimized for \"vertexBuffers\" on RenderPipeline\n\n\t\t\t\tarrayStride = geometryAttribute.data.stride * bytesPerElement;\n\t\t\t\toffset = geometryAttribute.offset * bytesPerElement;\n\n\t\t\t}\n\n\t\t\tattributes.push( {\n\t\t\t\tname,\n\t\t\t\tarrayStride,\n\t\t\t\toffset,\n\t\t\t\tformat,\n\t\t\t\tslot\n\t\t\t} );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n}\n\nexport default WebGPURenderPipeline;\n", "let _id = 0;\n\nclass WebGPUProgrammableStage {\n\n\tconstructor( device, code, type ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.usedTimes = 0;\n\n\t\tthis.stage = {\n\t\t\tmodule: device.createShaderModule( { code, label: type } ),\n\t\t\tentryPoint: 'main'\n\t\t};\n\n\t}\n\n}\n\nexport default WebGPUProgrammableStage;\n", "import WebGPURenderPipeline from './WebGPURenderPipeline.js';\nimport WebGPUProgrammableStage from './WebGPUProgrammableStage.js';\n\nclass WebGPURenderPipelines {\n\n\tconstructor( device, nodes, utils ) {\n\n\t\tthis.device = device;\n\t\tthis.nodes = nodes;\n\t\tthis.utils = utils;\n\n\t\tthis.bindings = null;\n\n\t\tthis.pipelines = [];\n\t\tthis.cache = new WeakMap();\n\n\t\tthis.stages = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map()\n\t\t};\n\n\t}\n\n\tget( renderObject ) {\n\n\t\tconst device = this.device;\n\t\tconst cache = this._getCache( renderObject );\n\n\t\tlet currentPipeline = cache.currentPipeline;\n\n\t\tif ( this._needsUpdate( renderObject ) ) {\n\n\t\t\t// release previous cache\n\n\t\t\tthis._releasePipeline( renderObject );\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilder = this.nodes.get( renderObject );\n\n\t\t\t// programmable stages\n\n\t\t\tlet stageVertex = this.stages.vertex.get( nodeBuilder.vertexShader );\n\n\t\t\tif ( stageVertex === undefined ) {\n\n\t\t\t\tstageVertex = new WebGPUProgrammableStage( device, nodeBuilder.vertexShader, 'vertex' );\n\t\t\t\tthis.stages.vertex.set( nodeBuilder.vertexShader, stageVertex );\n\n\t\t\t}\n\n\t\t\tlet stageFragment = this.stages.fragment.get( nodeBuilder.fragmentShader );\n\n\t\t\tif ( stageFragment === undefined ) {\n\n\t\t\t\tstageFragment = new WebGPUProgrammableStage( device, nodeBuilder.fragmentShader, 'fragment' );\n\t\t\t\tthis.stages.fragment.set( nodeBuilder.fragmentShader, stageFragment );\n\n\t\t\t}\n\n\t\t\t// determine render pipeline\n\n\t\t\tcurrentPipeline = this._acquirePipeline( stageVertex, stageFragment, renderObject );\n\t\t\tcache.currentPipeline = currentPipeline;\n\n\t\t\t// keep track of all used times\n\n\t\t\tcurrentPipeline.usedTimes ++;\n\t\t\tstageVertex.usedTimes ++;\n\t\t\tstageFragment.usedTimes ++;\n\n\t\t}\n\n\t\treturn currentPipeline;\n\n\t}\n\n\tremove( renderObject ) {\n\n\t\tthis._releasePipeline( renderObject );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.pipelines = [];\n\t\tthis.cache = new WeakMap();\n\t\tthis.shaderModules = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map()\n\t\t};\n\n\t}\n\n\t_acquirePipeline( stageVertex, stageFragment, renderObject ) {\n\n\t\tlet pipeline;\n\t\tconst pipelines = this.pipelines;\n\n\t\t// check for existing pipeline\n\n\t\tconst cacheKey = this._computeCacheKey( stageVertex, stageFragment, renderObject );\n\n\t\tfor ( let i = 0, il = pipelines.length; i < il; i ++ ) {\n\n\t\t\tconst preexistingPipeline = pipelines[ i ];\n\n\t\t\tif ( preexistingPipeline.cacheKey === cacheKey ) {\n\n\t\t\t\tpipeline = preexistingPipeline;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new WebGPURenderPipeline( this.device, this.utils );\n\t\t\tpipeline.init( cacheKey, stageVertex, stageFragment, renderObject, this.nodes.get( renderObject ) );\n\n\t\t\tpipelines.push( pipeline );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t_computeCacheKey( stageVertex, stageFragment, renderObject ) {\n\n\t\tconst { object, material } = renderObject;\n\t\tconst utils = this.utils;\n\n\t\tconst parameters = [\n\t\t\tstageVertex.id, stageFragment.id,\n\t\t\tmaterial.transparent, material.blending, material.premultipliedAlpha,\n\t\t\tmaterial.blendSrc, material.blendDst, material.blendEquation,\n\t\t\tmaterial.blendSrcAlpha, material.blendDstAlpha, material.blendEquationAlpha,\n\t\t\tmaterial.colorWrite,\n\t\t\tmaterial.depthWrite, material.depthTest, material.depthFunc,\n\t\t\tmaterial.stencilWrite, material.stencilFunc,\n\t\t\tmaterial.stencilFail, material.stencilZFail, material.stencilZPass,\n\t\t\tmaterial.stencilFuncMask, material.stencilWriteMask,\n\t\t\tmaterial.side,\n\t\t\tutils.getSampleCount(),\n\t\t\tutils.getCurrentColorSpace(), utils.getCurrentColorFormat(), utils.getCurrentDepthStencilFormat(),\n\t\t\tutils.getPrimitiveTopology( object, material )\n\t\t];\n\n\t\treturn parameters.join();\n\n\t}\n\n\t_getCache( renderObject ) {\n\n\t\tlet cache = this.cache.get( renderObject );\n\n\t\tif ( cache === undefined ) {\n\n\t\t\tcache = {};\n\t\t\tthis.cache.set( renderObject, cache );\n\n\t\t}\n\n\t\treturn cache;\n\n\t}\n\n\t_releasePipeline( renderObject ) {\n\n\t\tconst cache = this._getCache( renderObject );\n\n\t\tconst pipeline = cache.currentPipeline;\n\t\tdelete cache.currentPipeline;\n\n\t\tthis.bindings.remove( renderObject );\n\n\t\tif ( pipeline && -- pipeline.usedTimes === 0 ) {\n\n\t\t\tconst pipelines = this.pipelines;\n\n\t\t\tconst i = pipelines.indexOf( pipeline );\n\t\t\tpipelines[ i ] = pipelines[ pipelines.length - 1 ];\n\t\t\tpipelines.pop();\n\n\t\t\tthis._releaseStage( pipeline.stageVertex );\n\t\t\tthis._releaseStage( pipeline.stageFragment );\n\n\t\t}\n\n\t}\n\n\t_releaseStage( stage ) {\n\n\t\tif ( -- stage.usedTimes === 0 ) {\n\n\t\t\tconst code = stage.code;\n\t\t\tconst type = stage.type;\n\n\t\t\tthis.stages[ type ].delete( code );\n\n\t\t}\n\n\t}\n\n\t_needsUpdate( renderObject ) {\n\n\t\tconst cache = this._getCache( renderObject );\n\t\tconst material = renderObject.material;\n\n\t\tlet needsUpdate = false;\n\n\t\t// check pipeline state\n\n\t\tif ( cache.currentPipeline === undefined ) needsUpdate = true;\n\n\t\t// check material state\n\n\t\tif ( cache.material !== material || cache.materialVersion !== material.version ||\n\t\t\tcache.transparent !== material.transparent || cache.blending !== material.blending || cache.premultipliedAlpha !== material.premultipliedAlpha ||\n\t\t\tcache.blendSrc !== material.blendSrc || cache.blendDst !== material.blendDst || cache.blendEquation !== material.blendEquation ||\n\t\t\tcache.blendSrcAlpha !== material.blendSrcAlpha || cache.blendDstAlpha !== material.blendDstAlpha || cache.blendEquationAlpha !== material.blendEquationAlpha ||\n\t\t\tcache.colorWrite !== material.colorWrite ||\n\t\t\tcache.depthWrite !== material.depthWrite || cache.depthTest !== material.depthTest || cache.depthFunc !== material.depthFunc ||\n\t\t\tcache.stencilWrite !== material.stencilWrite || cache.stencilFunc !== material.stencilFunc ||\n\t\t\tcache.stencilFail !== material.stencilFail || cache.stencilZFail !== material.stencilZFail || cache.stencilZPass !== material.stencilZPass ||\n\t\t\tcache.stencilFuncMask !== material.stencilFuncMask || cache.stencilWriteMask !== material.stencilWriteMask ||\n\t\t\tcache.side !== material.side\n\t\t) {\n\n\t\t\tcache.material = material; cache.materialVersion = material.version;\n\t\t\tcache.transparent = material.transparent; cache.blending = material.blending; cache.premultipliedAlpha = material.premultipliedAlpha;\n\t\t\tcache.blendSrc = material.blendSrc; cache.blendDst = material.blendDst; cache.blendEquation = material.blendEquation;\n\t\t\tcache.blendSrcAlpha = material.blendSrcAlpha; cache.blendDstAlpha = material.blendDstAlpha; cache.blendEquationAlpha = material.blendEquationAlpha;\n\t\t\tcache.colorWrite = material.colorWrite;\n\t\t\tcache.depthWrite = material.depthWrite; cache.depthTest = material.depthTest; cache.depthFunc = material.depthFunc;\n\t\t\tcache.stencilWrite = material.stencilWrite; cache.stencilFunc = material.stencilFunc;\n\t\t\tcache.stencilFail = material.stencilFail; cache.stencilZFail = material.stencilZFail; cache.stencilZPass = material.stencilZPass;\n\t\t\tcache.stencilFuncMask = material.stencilFuncMask; cache.stencilWriteMask = material.stencilWriteMask;\n\t\t\tcache.side = material.side;\n\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\t// check renderer state\n\n\t\tconst utils = this.utils;\n\n\t\tconst sampleCount = utils.getSampleCount();\n\t\tconst colorSpace = utils.getCurrentColorSpace();\n\t\tconst colorFormat = utils.getCurrentColorFormat();\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat();\n\n\t\tif ( cache.sampleCount !== sampleCount || cache.colorSpace !== colorSpace ||\n\t\t\tcache.colorFormat !== colorFormat || cache.depthStencilFormat !== depthStencilFormat ) {\n\n\t\t\tcache.sampleCount = sampleCount;\n\t\t\tcache.colorSpace = colorSpace;\n\t\t\tcache.colorFormat = colorFormat;\n\t\t\tcache.depthStencilFormat = depthStencilFormat;\n\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\treturn needsUpdate;\n\n\t}\n\n}\n\nexport default WebGPURenderPipelines;\n", "import WebGPUProgrammableStage from './WebGPUProgrammableStage.js';\n\nclass WebGPUComputePipelines {\n\n\tconstructor( device, nodes ) {\n\n\t\tthis.device = device;\n\t\tthis.nodes = nodes;\n\n\t\tthis.pipelines = new WeakMap();\n\t\tthis.stages = {\n\t\t\tcompute: new WeakMap()\n\t\t};\n\n\t}\n\n\thas( computeNode ) {\n\n\t\treturn this.pipelines.get( computeNode ) !== undefined;\n\n\t}\n\n\tget( computeNode ) {\n\n\t\tlet pipeline = this.pipelines.get( computeNode );\n\n\t\t// @TODO: Reuse compute pipeline if possible, introduce WebGPUComputePipeline\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tconst device = this.device;\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilder = this.nodes.getForCompute( computeNode );\n\t\t\tconst computeShader = nodeBuilder.computeShader;\n\n\t\t\tconst shader = {\n\t\t\t\tcomputeShader\n\t\t\t};\n\n\t\t\t// programmable stage\n\n\t\t\tlet stageCompute = this.stages.compute.get( shader );\n\n\t\t\tif ( stageCompute === undefined ) {\n\n \t\t\t\tstageCompute = new WebGPUProgrammableStage( device, computeShader, 'compute' );\n\n\t\t\t\tthis.stages.compute.set( shader, stageCompute );\n\n\t\t\t}\n\n\t\t\tpipeline = device.createComputePipeline( {\n\t\t\t\tcompute: stageCompute.stage,\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.pipelines.set( computeNode, pipeline );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.pipelines = new WeakMap();\n\t\tthis.stages = {\n\t\t\tcompute: new WeakMap()\n\t\t};\n\n\t}\n\n}\n\nexport default WebGPUComputePipelines;\n", "class WebGPUBindings {\n\n\tconstructor( device, info, properties, textures, renderPipelines, computePipelines, attributes, nodes ) {\n\n\t\tthis.device = device;\n\t\tthis.info = info;\n\t\tthis.properties = properties;\n\t\tthis.textures = textures;\n\t\tthis.renderPipelines = renderPipelines;\n\t\tthis.computePipelines = computePipelines;\n\t\tthis.attributes = attributes;\n\t\tthis.nodes = nodes;\n\n\t\tthis.uniformsData = new WeakMap();\n\n\t\tthis.updateMap = new WeakMap();\n\n\t}\n\n\tget( renderObject ) {\n\n\t\tlet data = this.uniformsData.get( renderObject );\n\n\t\tif ( data === undefined ) {\n\n\t\t\t// each object defines an array of bindings (ubos, textures, samplers etc.)\n\n\t\t\tconst nodeBuilder = this.nodes.get( renderObject );\n\t\t\tconst bindings = nodeBuilder.getBindings();\n\n\t\t\t// setup (static) binding layout and (dynamic) binding group\n\n\t\t\tconst pipeline = this.renderPipelines.get( renderObject ).pipeline;\n\n\t\t\tconst bindLayout = pipeline.getBindGroupLayout( 0 );\n\t\t\tconst bindGroup = this._createBindGroup( bindings, bindLayout );\n\n\t\t\tdata = {\n\t\t\t\tlayout: bindLayout,\n\t\t\t\tgroup: bindGroup,\n\t\t\t\tbindings: bindings\n\t\t\t};\n\n\t\t\tthis.uniformsData.set( renderObject, data );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tlet data = this.uniformsData.get( computeNode );\n\n\t\tif ( data === undefined ) {\n\n\t\t\t// each object defines an array of bindings (ubos, textures, samplers etc.)\n\n\t\t\tconst nodeBuilder = this.nodes.getForCompute( computeNode );\n\t\t\tconst bindings = nodeBuilder.getBindings();\n\n\t\t\t// setup (static) binding layout and (dynamic) binding group\n\n\t\t\tconst pipeline = this.computePipelines.get( computeNode );\n\n\t\t\tconst bindLayout = pipeline.getBindGroupLayout( 0 );\n\t\t\tconst bindGroup = this._createBindGroup( bindings, bindLayout );\n\n\t\t\tdata = {\n\t\t\t\tlayout: bindLayout,\n\t\t\t\tgroup: bindGroup,\n\t\t\t\tbindings: bindings\n\t\t\t};\n\n\t\t\tthis.uniformsData.set( computeNode, data );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tremove( object ) {\n\n\t\tthis.uniformsData.delete( object );\n\n\t}\n\n\tupdate( object ) {\n\n\t\tconst textures = this.textures;\n\n\t\tconst data = this.get( object );\n\t\tconst bindings = data.bindings;\n\n\t\tconst updateMap = this.updateMap;\n\t\tconst frame = this.info.render.frame;\n\n\t\tlet needsBindGroupRefresh = false;\n\n\t\t// iterate over all bindings and check if buffer updates or a new binding group is required\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tconst isShared = binding.isShared;\n\t\t\tconst isUpdated = updateMap.get( binding ) === frame;\n\n\t\t\tif ( isShared && isUpdated ) continue;\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst buffer = binding.getBuffer();\n\t\t\t\tconst needsBufferWrite = binding.update();\n\n\t\t\t\tif ( needsBufferWrite === true ) {\n\n\t\t\t\t\tconst bufferGPU = binding.bufferGPU;\n\n\t\t\t\t\tthis.device.queue.writeBuffer( bufferGPU, 0, buffer, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst attribute = binding.attribute;\n\n\t\t\t\tthis.attributes.update( attribute, false, binding.usage );\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst texture = binding.getTexture();\n\n\t\t\t\ttextures.updateSampler( texture );\n\n\t\t\t\tconst samplerGPU = textures.getSampler( texture );\n\n\t\t\t\tif ( binding.samplerGPU !== samplerGPU ) {\n\n\t\t\t\t\tbinding.samplerGPU = samplerGPU;\n\t\t\t\t\tneedsBindGroupRefresh = true;\n\n\t\t\t\t}\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst texture = binding.getTexture();\n\n\t\t\t\tconst needsTextureRefresh = textures.updateTexture( texture );\n\n\t\t\t\tconst textureGPU = textures.getTextureGPU( texture );\n\n\t\t\t\tif ( textureGPU !== undefined && binding.textureGPU !== textureGPU || needsTextureRefresh === true ) {\n\n\t\t\t\t\tbinding.textureGPU = textureGPU;\n\t\t\t\t\tneedsBindGroupRefresh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tupdateMap.set( binding, frame );\n\n\t\t}\n\n\t\tif ( needsBindGroupRefresh === true ) {\n\n\t\t\tdata.group = this._createBindGroup( bindings, data.layout );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.uniformsData = new WeakMap();\n\t\tthis.updateMap = new WeakMap();\n\n\t}\n\n\t_createBindGroup( bindings, layout ) {\n\n\t\tlet bindingPoint = 0;\n\t\tconst entries = [];\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tif ( binding.bufferGPU === null ) {\n\n\t\t\t\t\tconst byteLength = binding.getByteLength();\n\n\t\t\t\t\tbinding.bufferGPU = this.device.createBuffer( {\n\t\t\t\t\t\tlabel: 'bindingBuffer',\n\t\t\t\t\t\tsize: byteLength,\n\t\t\t\t\t\tusage: binding.usage\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tentries.push( { binding: bindingPoint, resource: { buffer: binding.bufferGPU } } );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tif ( binding.bufferGPU === null ) {\n\n\t\t\t\t\tconst attribute = binding.attribute;\n\n\t\t\t\t\tthis.attributes.update( attribute, false, binding.usage );\n\t\t\t\t\tbinding.bufferGPU = this.attributes.get( attribute ).buffer;\n\n\t\t\t\t}\n\n\t\t\t\tentries.push( { binding: bindingPoint, resource: { buffer: binding.bufferGPU } } );\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tif ( binding.samplerGPU === null ) {\n\n\t\t\t\t\tbinding.samplerGPU = this.textures.getDefaultSampler();\n\n\t\t\t\t}\n\n\t\t\t\tentries.push( { binding: bindingPoint, resource: binding.samplerGPU } );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tif ( binding.textureGPU === null ) {\n\n\t\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\t\tbinding.textureGPU = this.textures.getDefaultCubeTexture();\n\n\t\t\t\t\t} else if ( binding.texture.isVideoTexture ) {\n\n\t\t\t\t\t\tbinding.textureGPU = this.textures.getDefaultVideoTexture();\n\n\t\t\t\t\t} else if ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\t\tbinding.textureGPU = this.textures.getDefaultDepthTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbinding.textureGPU = this.textures.getDefaultTexture();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst resource = binding.textureGPU instanceof GPUTexture ? binding.textureGPU.createView( { aspect: binding.aspect, dimension: binding.dimension } ) : binding.textureGPU;\n\n\t\t\t\tentries.push( { binding: bindingPoint, resource } );\n\n\t\t\t}\n\n\t\t\tbindingPoint ++;\n\n\t\t}\n\n\t\treturn this.device.createBindGroup( {\n\t\t\tlayout,\n\t\t\tentries\n\t\t} );\n\n\t}\n\n}\n\nexport default WebGPUBindings;\n", "import WebGPUWeakMap from './WebGPUWeakMap.js';\nimport { lights } from '../../nodes/Nodes.js';\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nclass WebGPURenderList {\n\n\tconstructor() {\n\n\t\tthis.renderItems = [];\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque = [];\n\t\tthis.transparent = [];\n\n\t\tthis.lightsNode = lights( [] );\n\t\tthis.lightsArray = [];\n\n\t}\n\n\tinit() {\n\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque.length = 0;\n\t\tthis.transparent.length = 0;\n\t\tthis.lightsArray.length = 0;\n\n\t\treturn this;\n\n\t}\n\n\tgetNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = this.renderItems[ this.renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\tthis.renderItems[ this.renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\tthis.renderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tpush( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t( material.transparent === true ? this.transparent : this.opaque ).push( renderItem );\n\n\t}\n\n\tunshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t( material.transparent === true ? this.transparent : this.opaque ).unshift( renderItem );\n\n\t}\n\n\tpushLight( light ) {\n\n\t\tthis.lightsArray.push( light );\n\n\t}\n\n\tgetLightsNode() {\n\n\t\treturn this.lightsNode.fromLights( this.lightsArray );\n\n\t}\n\n\tsort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( this.opaque.length > 1 ) this.opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( this.transparent.length > 1 ) this.transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfinish() {\n\n\t\t// update lights\n\n\t\tthis.lightsNode.fromLights( this.lightsArray );\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = this.renderItemsIndex, il = this.renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = this.renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.program = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n}\n\nclass WebGPURenderLists {\n\n\tconstructor() {\n\n\t\tthis.lists = new WeakMap();\n\t\tthis.lists = new WebGPUWeakMap();\n\n\t}\n\n\tget( scene, camera ) {\n\n\t\tconst lists = this.lists;\n\t\tconst keys = [ scene, camera ];\n\n\t\tlet list = lists.get( keys );\n\n\t\tif ( list === undefined ) {\n\n\t\t\tlist = new WebGPURenderList();\n\t\t\tlists.set( keys, list );\n\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lists = new WeakMap();\n\n\t}\n\n}\n\nexport default WebGPURenderLists;\n", "import WebGPUWeakMap from './WebGPUWeakMap.js';\n\nclass WebGPURenderState {\n\n\tconstructor() {\n\n\t\tthis.depth = true;\n\t\tthis.stencil = true;\n\n\t\t// defined by renderer(backend)\n\n\t\tthis.descriptorGPU = null;\n\t\tthis.encoderGPU = null;\n\t\tthis.currentPassGPU = null;\n\n\t}\n\n}\n\nclass WebGPURenderStates {\n\n\tconstructor() {\n\n\t\tthis.renderStates = new WebGPUWeakMap();\n\n\t}\n\n\tget( scene, camera ) {\n\n\t\tconst chainKey = [ scene, camera ];\n\n\t\tlet renderState = this.renderStates.get( chainKey );\n\n\t\tif ( renderState === undefined ) {\n\n\t\t\trenderState = new WebGPURenderState();\n\n\t\t\tthis.renderStates.set( chainKey, renderState );\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderStates = new WebGPUWeakMap();\n\n\t}\n\n}\n\nexport default WebGPURenderStates;\n", "// Copyright 2020 Brandon Jones\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { GPUTextureViewDimension, GPUIndexFormat, GPUFilterMode, GPUPrimitiveTopology, GPULoadOp, GPUStoreOp } from './constants.js';\n\n// ported from https://github.com/toji/web-texture-tool/blob/master/src/webgpu-mipmap-generator.js\n\nclass WebGPUTextureUtils {\n\n\tconstructor( device ) {\n\n\t\tthis.device = device;\n\n\t\tconst mipmapVertexSource = `\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n`;\n\n\t\tconst mipmapFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n`;\n\n\t\tthis.sampler = device.createSampler( { minFilter: GPUFilterMode.Linear } );\n\n\t\t// We'll need a new pipeline for every texture format used.\n\t\tthis.pipelines = {};\n\n\t\tthis.mipmapVertexShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapVertex',\n\t\t\tcode: mipmapVertexSource\n\t\t} );\n\n\t\tthis.mipmapFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapFragment',\n\t\t\tcode: mipmapFragmentSource\n\t\t} );\n\n\t}\n\n\tgetMipmapPipeline( format ) {\n\n\t\tlet pipeline = this.pipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.mipmapFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.pipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\tgenerateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst pipeline = this.getMipmapPipeline( textureGPUDescriptor.format );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\tlet srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tfor ( let i = 1; i < textureGPUDescriptor.mipLevelCount; i ++ ) {\n\n\t\t\tconst dstView = textureGPU.createView( {\n\t\t\t\tbaseMipLevel: i,\n\t\t\t\tmipLevelCount: 1,\n\t\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\t\tbaseArrayLayer\n\t\t\t} );\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: dstView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.sampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: srcView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\t\t\tpassEncoder.end();\n\n\t\t\tsrcView = dstView;\n\n\t\t}\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t}\n\n}\n\nexport default WebGPUTextureUtils;\n", "import { GPUTextureFormat, GPUAddressMode, GPUFilterMode, GPUTextureDimension, GPUFeatureName } from './constants.js';\nimport { VideoTexture, CubeTexture, Texture, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, RepeatWrapping, MirroredRepeatWrapping, RGB_ETC2_Format, RGBA_ETC2_EAC_Format,\n\tRGBAFormat, RedFormat, RGFormat, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, UnsignedByteType, FloatType, HalfFloatType, SRGBColorSpace, DepthFormat, DepthStencilFormat, DepthTexture,\n\tRGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format,\n\tRGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, UnsignedIntType, UnsignedShortType, UnsignedInt248Type\n} from 'three';\nimport WebGPUTextureUtils from './WebGPUTextureUtils.js';\n\nclass WebGPUTextures {\n\n\tconstructor( device, properties, info ) {\n\n\t\tthis.device = device;\n\t\tthis.properties = properties;\n\t\tthis.info = info;\n\n\t\tthis.defaultTexture = null;\n\t\tthis.depthDefaultTexture = null;\n\t\tthis.defaultVideoTexture = null;\n\t\tthis.defaultCubeTexture = null;\n\t\tthis.defaultSampler = null;\n\n\t\tthis.samplerCache = new Map();\n\t\tthis.utils = null;\n\n\t}\n\n\tgetDefaultSampler() {\n\n\t\tif ( this.defaultSampler === null ) {\n\n\t\t\tthis.defaultSampler = this.device.createSampler( {} );\n\n\t\t}\n\n\t\treturn this.defaultSampler;\n\n\t}\n\n\tgetDefaultDepthTexture() {\n\n\t\tif ( this.depthDefaultTexture === null ) {\n\n\t\t\tconst depthTexture = new DepthTexture();\n\t\t\tdepthTexture.image.width = 1;\n\t\t\tdepthTexture.image.height = 1;\n\n\t\t\tthis._uploadTexture( depthTexture );\n\n\t\t\tthis.depthDefaultTexture = this.getTextureGPU( depthTexture );\n\n\t\t}\n\n\t\treturn this.depthDefaultTexture;\n\n\t}\n\n\tgetDefaultTexture() {\n\n\t\tif ( this.defaultTexture === null ) {\n\n\t\t\tconst texture = new Texture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis._uploadTexture( texture );\n\n\t\t\tthis.defaultTexture = this.getTextureGPU( texture );\n\n\t\t}\n\n\t\treturn this.defaultTexture;\n\n\t}\n\n\tgetDefaultVideoTexture() {\n\n\t\tif ( this.defaultVideoTexture === null ) {\n\n\t\t\tconst video = document.getElementById( 'video' );\n\n\t\t\tconst texture = new VideoTexture( video );\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis._uploadVideoTexture( texture );\n\n\t\t\tthis.defaultVideoTexture = this.getTextureGPU( texture );\n\n\t\t}\n\n\t\treturn this.defaultVideoTexture;\n\n\t}\n\n\tgetDefaultCubeTexture() {\n\n\t\tif ( this.defaultCubeTexture === null ) {\n\n\t\t\tconst texture = new CubeTexture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis._uploadTexture( texture );\n\n\t\t\tthis.defaultCubeTexture = this.getTextureGPU( texture );\n\n\t\t}\n\n\t\treturn this.defaultCubeTexture;\n\n\t}\n\n\tgetTextureGPU( texture ) {\n\n\t\tconst textureProperties = this.properties.get( texture );\n\n\t\treturn textureProperties.textureGPU;\n\n\t}\n\n\tgetSampler( texture ) {\n\n\t\tconst textureProperties = this.properties.get( texture );\n\n\t\treturn textureProperties.samplerGPU;\n\n\t}\n\n\tupdateTexture( texture ) {\n\n\t\tlet needsUpdate = false;\n\n\t\tconst textureProperties = this.properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGPURenderer: Texture marked for update but image is undefined.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGPURenderer: Texture marked for update but image is incomplete.' );\n\n\t\t\t} else {\n\n\t\t\t\t// texture init\n\n\t\t\t\tif ( textureProperties.initialized === undefined ) {\n\n\t\t\t\t\ttextureProperties.initialized = true;\n\n\t\t\t\t\tconst disposeCallback = onTextureDispose.bind( this );\n\t\t\t\t\ttextureProperties.disposeCallback = disposeCallback;\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', disposeCallback );\n\n\t\t\t\t\tthis.info.memory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t\tneedsUpdate = this._uploadVideoTexture( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tneedsUpdate = this._uploadTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// if the texture is used for RTT, it's necessary to init it once so the binding\n\t\t// group's resource definition points to the respective GPUTexture\n\n\t\tif ( textureProperties.initializedRTT === false ) {\n\n\t\t\ttextureProperties.initializedRTT = true;\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\treturn needsUpdate;\n\n\t}\n\n\tupdateSampler( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\n\t\tconst key = array.join();\n\t\tlet samplerGPU = this.samplerCache.get( key );\n\n\t\tif ( samplerGPU === undefined ) {\n\n\t\t\tsamplerGPU = this.device.createSampler( {\n\t\t\t\taddressModeU: this._convertAddressMode( texture.wrapS ),\n\t\t\t\taddressModeV: this._convertAddressMode( texture.wrapT ),\n\t\t\t\taddressModeW: this._convertAddressMode( texture.wrapR ),\n\t\t\t\tmagFilter: this._convertFilterMode( texture.magFilter ),\n\t\t\t\tminFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\t\tmipmapFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\t\tmaxAnisotropy: texture.anisotropy\n\t\t\t} );\n\n\t\t\tthis.samplerCache.set( key, samplerGPU );\n\n\t\t}\n\n\t\tconst textureProperties = this.properties.get( texture );\n\t\ttextureProperties.samplerGPU = samplerGPU;\n\n\t}\n\n\tinitRenderTarget( renderTarget ) {\n\n\t\tconst properties = this.properties;\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( renderTargetProperties.initialized === undefined ) {\n\n\t\t\tconst device = this.device;\n\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tconst colorTextureFormat = texture.internalFormat || this._getFormat( texture );\n\t\t\tconst label = texture.name ? '_' + texture.name : '';\n\t\t\tconst needsMipmaps = this._needsMipmaps( texture );\n\t\t\tconst mipLevelCount = this._getMipLevelCount( texture, width, height, needsMipmaps );\n\n\t\t\tconst colorTextureGPU = device.createTexture( {\n\t\t\t\tlabel: 'renderTarget' + label,\n\t\t\t\tsize: {\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height,\n\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t},\n\t\t\t\tmipLevelCount: mipLevelCount,\n\t\t\t\tformat: colorTextureFormat,\n\t\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST\n\t\t\t} );\n\n\t\t\tthis.info.memory.textures ++;\n\n\t\t\trenderTargetProperties.colorTextureGPU = colorTextureGPU;\n\t\t\trenderTargetProperties.colorTextureFormat = colorTextureFormat;\n\n\t\t\t// When the \".texture\" or \".depthTexture\" property of a render target is used as a map,\n\t\t\t// the renderer has to find the respective GPUTexture objects to setup the bind groups.\n\t\t\t// Since it's not possible to see just from a texture object whether it belongs to a render\n\t\t\t// target or not, we need the initializedRTT flag.\n\n\t\t\tconst textureProperties = properties.get( texture );\n\t\t\ttextureProperties.textureGPU = colorTextureGPU;\n\t\t\ttextureProperties.initializedRTT = false;\n\n\t\t\tif ( renderTarget.depthBuffer === true ) {\n\n\t\t\t\tconst depthTextureFormat = renderTarget.depthTexture !== null ? this._getFormat( renderTarget.depthTexture ) : GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t\t\tconst depthTextureGPU = device.createTexture( {\n\t\t\t\t\tlabel: 'renderTarget' + label + '_depthBuffer',\n\t\t\t\t\tsize: {\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t\t},\n\t\t\t\t\tformat: depthTextureFormat,\n\t\t\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST\n\t\t\t\t} );\n\n\t\t\t\tthis.info.memory.textures ++;\n\n\t\t\t\trenderTargetProperties.depthTextureGPU = depthTextureGPU;\n\t\t\t\trenderTargetProperties.depthTextureFormat = depthTextureFormat;\n\n\t\t\t\tif ( renderTarget.depthTexture !== null ) {\n\n\t\t\t\t\tconst depthTextureProperties = properties.get( renderTarget.depthTexture );\n\t\t\t\t\tdepthTextureProperties.textureGPU = depthTextureGPU;\n\t\t\t\t\tdepthTextureProperties.initializedRTT = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst disposeCallback = onRenderTargetDispose.bind( this );\n\t\t\trenderTargetProperties.disposeCallback = disposeCallback;\n\n\t\t\trenderTarget.addEventListener( 'dispose', disposeCallback );\n\n\t\t\t//\n\n\t\t\trenderTargetProperties.initialized = true;\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.samplerCache.clear();\n\n\t}\n\n\t_convertAddressMode( value ) {\n\n\t\tlet addressMode = GPUAddressMode.ClampToEdge;\n\n\t\tif ( value === RepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.Repeat;\n\n\t\t} else if ( value === MirroredRepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.MirrorRepeat;\n\n\t\t}\n\n\t\treturn addressMode;\n\n\t}\n\n\t_convertFilterMode( value ) {\n\n\t\tlet filterMode = GPUFilterMode.Linear;\n\n\t\tif ( value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter ) {\n\n\t\t\tfilterMode = GPUFilterMode.Nearest;\n\n\t\t}\n\n\t\treturn filterMode;\n\n\t}\n\n\t_uploadVideoTexture( texture ) {\n\n\t\tconst device = this.device;\n\n\t\tconst textureProperties = this.properties.get( texture );\n\n\t\tconst textureGPU = device.importExternalTexture( {\n\t\t\tsource: texture.source.data\n\t\t} );\n\n\t\ttextureProperties.textureGPU = textureGPU;\n\t\t//textureProperties.version = texture.version; // @TODO: Force update for now, study a better solution soon using native VideoTexture.update() to fix warns\n\n\t\treturn true;\n\n\t}\n\n\t_uploadTexture( texture ) {\n\n\t\tlet needsUpdate = false;\n\n\t\tconst device = this.device;\n\t\tconst image = texture.image;\n\n\t\tconst textureProperties = this.properties.get( texture );\n\n\t\tconst { width, height, depth } = this._getSize( texture );\n\t\tconst needsMipmaps = this._needsMipmaps( texture );\n\t\tconst dimension = this._getDimension( texture );\n\t\tconst mipLevelCount = this._getMipLevelCount( texture, width, height, needsMipmaps );\n\t\tconst format = texture.internalFormat || this._getFormat( texture );\n\n\t\tlet usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n\n\t\tif ( needsMipmaps ) {\n\n\t\t\t// current mipmap generation requires RENDER_ATTACHMENT\n\n\t\t\tusage |= GPUTextureUsage.RENDER_ATTACHMENT;\n\n\t\t}\n\n\t\tconst textureGPUDescriptor = {\n\t\t\tlabel: texture.name,\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: depth,\n\t\t\t},\n\t\t\tmipLevelCount: mipLevelCount,\n\t\t\tsampleCount: 1,\n\t\t\tdimension: dimension,\n\t\t\tformat: format,\n\t\t\tusage: usage\n\t\t};\n\n\t\t// texture creation\n\n\t\tlet textureGPU = textureProperties.textureGPU;\n\n\t\tif ( textureGPU === undefined ) {\n\n\t\t\ttextureGPU = device.createTexture( textureGPUDescriptor );\n\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\t// transfer texture data\n\n\t\tif ( texture.isDataTexture || texture.isDataArrayTexture || texture.isData3DTexture ) {\n\n\t\t\tthis._copyBufferToTexture( image, textureGPU, textureGPUDescriptor, needsMipmaps );\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tthis._copyCompressedBufferToTexture( texture.mipmaps, textureGPU, textureGPUDescriptor );\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tif ( image.length === 6 ) {\n\n\t\t\t\tthis._copyCubeMapToTexture( image, texture, textureGPU, textureGPUDescriptor, needsMipmaps );\n\n\t\t\t}\n\n\t\t} else if ( texture.isRenderTargetTexture ) {\n\n\t\t\tif ( needsMipmaps === true ) this._generateMipmaps( textureGPU, textureGPUDescriptor );\n\n\t\t} else if ( texture.isDepthTexture !== true && image !== null ) {\n\n\t\t\tthis._copyImageToTexture( image, texture, textureGPU, textureGPUDescriptor, needsMipmaps );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureProperties.textureGPU = textureGPU;\n\t\ttextureProperties.version = texture.version;\n\n\t\treturn needsUpdate;\n\n\t}\n\n\t_copyBufferToTexture( image, textureGPU, textureGPUDescriptor, needsMipmaps, originDepth = 0 ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\t\t// @TODO: Consider to support valid buffer layouts with other formats like RGB\n\n\t\tconst data = image.data;\n\n\t\tconst bytesPerTexel = this._getBytesPerTexel( textureGPUDescriptor.format );\n\t\tconst bytesPerRow = image.width * bytesPerTexel;\n\n\t\tthis.device.queue.writeTexture(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t},\n\t\t\tdata,\n\t\t\t{\n\t\t\t\toffset: 0,\n\t\t\t\tbytesPerRow\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: ( image.depth !== undefined ) ? image.depth : 1\n\t\t\t} );\n\n\t\tif ( needsMipmaps === true ) this._generateMipmaps( textureGPU, textureGPUDescriptor, originDepth );\n\n\t}\n\n\t_copyCubeMapToTexture( images, texture, textureGPU, textureGPUDescriptor, needsMipmaps ) {\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst image = images[ i ];\n\n\t\t\tif ( image.isDataTexture ) {\n\n\t\t\t\tthis._copyBufferToTexture( image.image, textureGPU, textureGPUDescriptor, needsMipmaps, i );\n\n\t\t\t} else {\n\n\t\t\t\tthis._copyImageToTexture( image, texture, textureGPU, textureGPUDescriptor, needsMipmaps, i );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_copyExternalImageToTexture( image, textureGPU, textureGPUDescriptor, needsMipmaps, originDepth = 0 ) {\n\n\t\tthis.device.queue.copyExternalImageToTexture(\n\t\t\t{\n\t\t\t\tsource: image\n\t\t\t}, {\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t}, {\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t}\n\t\t);\n\n\t\tif ( needsMipmaps ) this._generateMipmaps( textureGPU, textureGPUDescriptor, originDepth );\n\n\t}\n\n\t_copyCompressedBufferToTexture( mipmaps, textureGPU, textureGPUDescriptor ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\n\t\tconst blockData = this._getBlockData( textureGPUDescriptor.format );\n\n\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\tconst width = mipmap.width;\n\t\t\tconst height = mipmap.height;\n\n\t\t\tconst bytesPerRow = Math.ceil( width / blockData.width ) * blockData.byteLength;\n\n\t\t\tthis.device.queue.writeTexture(\n\t\t\t\t{\n\t\t\t\t\ttexture: textureGPU,\n\t\t\t\t\tmipLevel: i\n\t\t\t\t},\n\t\t\t\tmipmap.data,\n\t\t\t\t{\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tbytesPerRow\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\twidth: Math.ceil( width / blockData.width ) * blockData.width,\n\t\t\t\t\theight: Math.ceil( height / blockData.width ) * blockData.width,\n\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t_generateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer ) {\n\n\t\tif ( this.utils === null ) {\n\n\t\t\tthis.utils = new WebGPUTextureUtils( this.device ); // only create this helper if necessary\n\n\t\t}\n\n\t\tthis.utils.generateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer );\n\n\t}\n\n\t_getBlockData( format ) {\n\n\t\t// this method is only relevant for compressed texture formats\n\n\t\tif ( format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB ) return { byteLength: 8, width: 4, height: 4 }; // DXT1\n\t\tif ( format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT3\n\t\tif ( format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT5\n\t\tif ( format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm ) return { byteLength: 8, width: 4, height: 4 }; // RGTC1\n\t\tif ( format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm ) return { byteLength: 16, width: 4, height: 4 }; // RGTC2\n\t\tif ( format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (float)\n\t\tif ( format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (unorm)\n\n\t\tif ( format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Unorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Snorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Unorm ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Snorm ) return { byteLength: 16, width: 4, height: 4 };\n\n\t\tif ( format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB ) return { byteLength: 16, width: 5, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB ) return { byteLength: 16, width: 5, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB ) return { byteLength: 16, width: 6, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB ) return { byteLength: 16, width: 6, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB ) return { byteLength: 16, width: 8, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB ) return { byteLength: 16, width: 8, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB ) return { byteLength: 16, width: 8, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB ) return { byteLength: 16, width: 10, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB ) return { byteLength: 16, width: 10, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB ) return { byteLength: 16, width: 10, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB ) return { byteLength: 16, width: 10, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB ) return { byteLength: 16, width: 12, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB ) return { byteLength: 16, width: 12, height: 12 };\n\n\t}\n\n\t_getBytesPerTexel( format ) {\n\n\t\tif ( format === GPUTextureFormat.R8Unorm ) return 1;\n\t\tif ( format === GPUTextureFormat.R16Float ) return 2;\n\t\tif ( format === GPUTextureFormat.RG8Unorm ) return 2;\n\t\tif ( format === GPUTextureFormat.RG16Float ) return 4;\n\t\tif ( format === GPUTextureFormat.R32Float ) return 4;\n\t\tif ( format === GPUTextureFormat.RGBA8Unorm || format === GPUTextureFormat.RGBA8UnormSRGB ) return 4;\n\t\tif ( format === GPUTextureFormat.RG32Float ) return 8;\n\t\tif ( format === GPUTextureFormat.RGBA16Float ) return 8;\n\t\tif ( format === GPUTextureFormat.RGBA32Float ) return 16;\n\n\t}\n\n\t_getDimension( texture ) {\n\n\t\tlet dimension;\n\n\t\tif ( texture.isData3DTexture ) {\n\n\t\t\tdimension = GPUTextureDimension.ThreeD;\n\n\t\t} else {\n\n\t\t\tdimension = GPUTextureDimension.TwoD;\n\n\t\t}\n\n\t\treturn dimension;\n\n\t}\n\n\t_getFormat( texture ) {\n\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\t\tconst colorSpace = texture.colorSpace;\n\n\t\tlet formatGPU;\n\n\t\tif ( texture.isCompressedTexture === true ) {\n\n\t\t\tswitch ( format ) {\n\n\t\t\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_S3TC_DXT3_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGB_ETC2_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tswitch ( format ) {\n\n\t\t\t\tcase RGBAFormat:\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAFormat.', type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RedFormat:\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Unorm;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedFormat.', type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase RGFormat:\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Unorm;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGFormat.', type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase DepthFormat:\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth16Unorm;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24Plus;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32Float;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthFormat.', type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase DepthStencilFormat:\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase UnsignedInt248Type:\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24PlusStencil8;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\t\tif ( this.device.features.has( GPUFeatureName.Depth32FloatStencil8 ) === false ) {\n\n\t\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32FloatStencil8;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn formatGPU;\n\n\t}\n\n\t_isHTMLImage( image ) {\n\n\t\treturn ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) || ( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement );\n\n\t}\n\n\t_copyImageToTexture( image, texture, textureGPU, textureGPUDescriptor, needsMipmaps, originDepth ) {\n\n\t\tif ( this._isHTMLImage( image ) ) {\n\n\t\t\tthis._getImageBitmapFromHTML( image, texture ).then( imageBitmap => {\n\n\t\t\t\tthis._copyExternalImageToTexture( imageBitmap, textureGPU, textureGPUDescriptor, needsMipmaps, originDepth );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\t// assume ImageBitmap\n\n\t\t\tthis._copyExternalImageToTexture( image, textureGPU, textureGPUDescriptor, needsMipmaps, originDepth );\n\n\t\t}\n\n\t}\n\n\t_getImageBitmapFromHTML( image, texture ) {\n\n\t\tconst width = image.width;\n\t\tconst height = image.height;\n\n\t\tconst options = {};\n\n\t\toptions.imageOrientation = ( texture.flipY === true ) ? 'flipY' : 'none';\n\t\toptions.premultiplyAlpha = ( texture.premultiplyAlpha === true ) ? 'premultiply' : 'default';\n\n\t\treturn createImageBitmap( image, 0, 0, width, height, options );\n\n\t}\n\n\t_getImageBitmap( image, texture ) {\n\n\t\tconst width = image.width;\n\t\tconst height = image.height;\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ) {\n\n\t\t\tconst options = {};\n\n\t\t\toptions.imageOrientation = ( texture.flipY === true ) ? 'flipY' : 'none';\n\t\t\toptions.premultiplyAlpha = ( texture.premultiplyAlpha === true ) ? 'premultiply' : 'default';\n\n\t\t\treturn createImageBitmap( image, 0, 0, width, height, options );\n\n\t\t} else {\n\n\t\t\t// assume ImageBitmap\n\n\t\t\treturn Promise.resolve( image );\n\n\t\t}\n\n\t}\n\n\t_getMipLevelCount( texture, width, height, needsMipmaps ) {\n\n\t\tlet mipLevelCount;\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tmipLevelCount = texture.mipmaps.length;\n\n\t\t} else if ( needsMipmaps ) {\n\n\t\t\tmipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;\n\n\t\t} else {\n\n\t\t\tmipLevelCount = 1; // a texture without mipmaps has a base mip (mipLevel 0)\n\n\t\t}\n\n\t\treturn mipLevelCount;\n\n\t}\n\n\t_getSize( texture ) {\n\n\t\tconst image = texture.image;\n\n\t\tlet width, height, depth;\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tconst faceImage = image.length > 0 ? image[ 0 ].image || image[ 0 ] : null;\n\n\t\t\twidth = faceImage ? faceImage.width : 1;\n\t\t\theight = faceImage ? faceImage.height : 1;\n\t\t\tdepth = 6; // one image for each side of the cube map\n\n\t\t} else if ( image !== null ) {\n\n\t\t\twidth = image.width;\n\t\t\theight = image.height;\n\t\t\tdepth = ( image.depth !== undefined ) ? image.depth : 1;\n\n\t\t} else {\n\n\t\t\twidth = height = depth = 1;\n\n\t\t}\n\n\t\treturn { width, height, depth };\n\n\t}\n\n\t_needsMipmaps( texture ) {\n\n\t\treturn ( texture.isCompressedTexture !== true ) && ( texture.generateMipmaps === true ) && ( texture.minFilter !== NearestFilter ) && ( texture.minFilter !== LinearFilter );\n\n\t}\n\n}\n\nfunction onRenderTargetDispose( event ) {\n\n\tconst renderTarget = event.target;\n\tconst properties = this.properties;\n\n\tconst renderTargetProperties = properties.get( renderTarget );\n\n\trenderTarget.removeEventListener( 'dispose', renderTargetProperties.disposeCallback );\n\n\trenderTargetProperties.colorTextureGPU.destroy();\n\tproperties.remove( renderTarget.texture );\n\n\tthis.info.memory.textures --;\n\n\tif ( renderTarget.depthBuffer === true ) {\n\n\t\trenderTargetProperties.depthTextureGPU.destroy();\n\n\t\tthis.info.memory.textures --;\n\n\t\tif ( renderTarget.depthTexture !== null ) {\n\n\t\t\tproperties.remove( renderTarget.depthTexture );\n\n\t\t}\n\n\t}\n\n\tproperties.remove( renderTarget );\n\n}\n\nfunction onTextureDispose( event ) {\n\n\tconst texture = event.target;\n\n\tconst textureProperties = this.properties.get( texture );\n\ttextureProperties.textureGPU.destroy();\n\n\ttexture.removeEventListener( 'dispose', textureProperties.disposeCallback );\n\n\tthis.properties.remove( texture );\n\n\tthis.info.memory.textures --;\n\n}\n\nexport default WebGPUTextures;\n", "import { GPULoadOp, GPUStoreOp } from './constants.js';\nimport { Color, Mesh, BoxGeometry, BackSide } from 'three';\nimport { context, positionWorldDirection, MeshBasicNodeMaterial } from '../../nodes/Nodes.js';\n\nlet _clearAlpha;\nconst _clearColor = new Color();\n\nclass WebGPUBackground {\n\n\tconstructor( renderer, properties ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.properties = properties;\n\n\t\tthis.boxMesh = null;\n\t\tthis.boxMeshNode = null;\n\n\t\tthis.forceClear = false;\n\n\t}\n\n\tclear() {\n\n\t\tthis.forceClear = true;\n\n\t}\n\n\tupdate( scene, renderList, renderState ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst background = ( scene.isScene === true ) ? scene.backgroundNode || this.properties.get( scene ).backgroundNode || scene.background : null;\n\n\t\tlet forceClear = this.forceClear;\n\n\t\tif ( background === null ) {\n\n\t\t\t// no background settings, use clear color configuration from the renderer\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\t\t\t_clearAlpha = renderer._clearAlpha;\n\n\t\t} else if ( background.isColor === true ) {\n\n\t\t\t// background is an opaque color\n\n\t\t\t_clearColor.copy( background );\n\t\t\t_clearAlpha = 1;\n\t\t\tforceClear = true;\n\n\t\t} else if ( background.isNode === true ) {\n\n\t\t\tconst sceneProperties = this.properties.get( scene );\n\t\t\tconst backgroundNode = background;\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\t\t\t_clearAlpha = renderer._clearAlpha;\n\n\t\t\tlet boxMesh = this.boxMesh;\n\n\t\t\tif ( boxMesh === null ) {\n\n\t\t\t\tthis.boxMeshNode = context( backgroundNode, {\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\n\t\t\t\t\tgetUVNode: () => positionWorldDirection\n\t\t\t\t} );\n\n\t\t\t\tconst nodeMaterial = new MeshBasicNodeMaterial();\n\t\t\t\tnodeMaterial.colorNode = this.boxMeshNode;\n\t\t\t\tnodeMaterial.side = BackSide;\n\t\t\t\tnodeMaterial.depthTest = false;\n\t\t\t\tnodeMaterial.depthWrite = false;\n\t\t\t\tnodeMaterial.fog = false;\n\n\t\t\t\tthis.boxMesh = boxMesh = new Mesh( new BoxGeometry( 1, 1, 1 ), nodeMaterial );\n\t\t\t\tboxMesh.frustumCulled = false;\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tconst scale = camera.far;\n\n\t\t\t\t\tthis.matrixWorld.makeScale( scale, scale, scale ).copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\n\n\t\t\tif ( sceneProperties.backgroundCacheKey !== backgroundCacheKey ) {\n\n\t\t\t\tthis.boxMeshNode.node = backgroundNode;\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tsceneProperties.backgroundCacheKey = backgroundCacheKey;\n\n\t\t\t}\n\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Unsupported background configuration.', background );\n\n\t\t}\n\n\t\t// configure render pass descriptor\n\n\t\tconst colorAttachment = renderState.descriptorGPU.colorAttachments[ 0 ];\n\t\tconst depthStencilAttachment = renderState.descriptorGPU.depthStencilAttachment;\n\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\n\n\t\t\tif ( renderer.autoClearColor === true ) {\n\n\t\t\t\t_clearColor.multiplyScalar( _clearAlpha );\n\n\t\t\t\tcolorAttachment.clearValue = { r: _clearColor.r, g: _clearColor.g, b: _clearColor.b, a: _clearAlpha };\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\tif ( renderState.depth ) {\n\n\t\t\t\tif ( renderer.autoClearDepth === true ) {\n\n\t\t\t\t\tdepthStencilAttachment.depthClearValue = renderer._clearDepth;\n\t\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\t\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderState.stencil ) {\n\n\t\t\t\tif ( renderer.autoClearStencil === true ) {\n\n\t\t\t\t\tdepthStencilAttachment.stencilClearValue = renderer._clearStencil;\n\t\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\t\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\tif ( renderState.depth ) {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\tif ( renderState.stencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.forceClear = false;\n\n\t}\n\n}\n\nexport default WebGPUBackground;\n", "class WebGPUBinding {\n\n\tconstructor( name = '' ) {\n\n\t\tthis.name = name;\n\t\tthis.visibility = null;\n\n\t\tthis.type = null; // read-only\n\n\t\tthis.isShared = false;\n\n\t}\n\n\tsetVisibility( visibility ) {\n\n\t\tthis.visibility = visibility;\n\n\t}\n\n}\n\nexport default WebGPUBinding;\n", "import { GPUChunkSize } from './constants.js';\n\nfunction getFloatLength( floatLength ) {\n\n\t// ensure chunk size alignment (STD140 layout)\n\n\treturn floatLength + ( ( GPUChunkSize - ( floatLength % GPUChunkSize ) ) % GPUChunkSize );\n\n}\n\nfunction getVectorLength( count, vectorLength = 4 ) {\n\n\tconst strideLength = getStrideLength( vectorLength );\n\n\tconst floatLength = strideLength * count;\n\n\treturn getFloatLength( floatLength );\n\n}\n\nfunction getStrideLength( vectorLength ) {\n\n\tconst strideLength = 4;\n\n\treturn vectorLength + ( ( strideLength - ( vectorLength % strideLength ) ) % strideLength );\n\n}\n\nexport {\n\tgetFloatLength,\n\tgetVectorLength,\n\tgetStrideLength\n};\n", "import WebGPUBinding from './WebGPUBinding.js';\nimport { getFloatLength } from './WebGPUBufferUtils.js';\n\nclass WebGPUBuffer extends WebGPUBinding {\n\n\tconstructor( name, type, buffer = null ) {\n\n\t\tsuper( name );\n\n\t\tthis.isBuffer = true;\n\n\t\tthis.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;\n\t\tthis.type = type;\n\t\tthis.visibility = GPUShaderStage.VERTEX;\n\n\t\tthis.usage = GPUBufferUsage.COPY_DST;\n\n\t\tthis.buffer = buffer;\n\t\tthis.bufferGPU = null; // set by the renderer\n\n\t}\n\n\tgetByteLength() {\n\n\t\treturn getFloatLength( this.buffer.byteLength );\n\n\t}\n\n\tgetBuffer() {\n\n\t\treturn this.buffer;\n\n\t}\n\n\tupdate() {\n\n\t\treturn true;\n\n\t}\n\n}\n\nexport default WebGPUBuffer;\n", "import WebGPUBuffer from './WebGPUBuffer.js';\nimport { GPUBindingType } from './constants.js';\n\nclass WebGPUUniformBuffer extends WebGPUBuffer {\n\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name, GPUBindingType.UniformBuffer, buffer );\n\n\t\tthis.isUniformBuffer = true;\n\n\t\tthis.usage |= GPUBufferUsage.UNIFORM;\n\n\t}\n\n}\n\nexport default WebGPUUniformBuffer;\n", "import WebGPUUniformBuffer from './WebGPUUniformBuffer.js';\nimport { GPUChunkSize } from './constants.js';\n\nclass WebGPUUniformsGroup extends WebGPUUniformBuffer {\n\n\tconstructor( name ) {\n\n\t\tsuper( name );\n\n\t\tthis.isUniformsGroup = true;\n\n\t\t// the order of uniforms in this array must match the order of uniforms in the shader\n\n\t\tthis.uniforms = [];\n\n\t}\n\n\taddUniform( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremoveUniform( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.uniforms.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetBuffer() {\n\n\t\tlet buffer = this.buffer;\n\n\t\tif ( buffer === null ) {\n\n\t\t\tconst byteLength = this.getByteLength();\n\n\t\t\tbuffer = new Float32Array( new ArrayBuffer( byteLength ) );\n\n\t\t\tthis.buffer = buffer;\n\n\t\t}\n\n\t\treturn buffer;\n\n\t}\n\n\tgetByteLength() {\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\n\t\tfor ( let i = 0, l = this.uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = this.uniforms[ i ];\n\n\t\t\t// offset within a single chunk in bytes\n\n\t\t\tconst chunkOffset = offset % GPUChunkSize;\n\t\t\tconst remainingSizeInChunk = GPUChunkSize - chunkOffset;\n\n\t\t\t// conformance tests\n\n\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - uniform.boundary ) < 0 ) {\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\toffset += ( GPUChunkSize - chunkOffset );\n\n\t\t\t} else if ( chunkOffset % uniform.boundary !== 0 ) {\n\n\t\t\t\t// check for correct alignment\n\n\t\t\t\toffset += ( chunkOffset % uniform.boundary );\n\n\t\t\t}\n\n\t\t\tuniform.offset = ( offset / this.bytesPerElement );\n\n\t\t\toffset += ( uniform.itemSize * this.bytesPerElement );\n\n\t\t}\n\n\t\treturn Math.ceil( offset / GPUChunkSize ) * GPUChunkSize;\n\n\t}\n\n\tupdate() {\n\n\t\tlet updated = false;\n\n\t\tfor ( const uniform of this.uniforms ) {\n\n\t\t\tif ( this.updateByType( uniform ) === true ) {\n\n\t\t\t\tupdated = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateByType( uniform ) {\n\n\t\tif ( uniform.isFloatUniform ) return this.updateNumber( uniform );\n\t\tif ( uniform.isVector2Uniform ) return this.updateVector2( uniform );\n\t\tif ( uniform.isVector3Uniform ) return this.updateVector3( uniform );\n\t\tif ( uniform.isVector4Uniform ) return this.updateVector4( uniform );\n\t\tif ( uniform.isColorUniform ) return this.updateColor( uniform );\n\t\tif ( uniform.isMatrix3Uniform ) return this.updateMatrix3( uniform );\n\t\tif ( uniform.isMatrix4Uniform ) return this.updateMatrix4( uniform );\n\n\t\tconsole.error( 'THREE.WebGPUUniformsGroup: Unsupported uniform type.', uniform );\n\n\t}\n\n\tupdateNumber( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset ] !== v ) {\n\n\t\t\ta[ offset ] = v;\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector2( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y ) {\n\n\t\t\ta[ offset + 0 ] = v.x;\n\t\t\ta[ offset + 1 ] = v.y;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z ) {\n\n\t\t\ta[ offset + 0 ] = v.x;\n\t\t\ta[ offset + 1 ] = v.y;\n\t\t\ta[ offset + 2 ] = v.z;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z || a[ offset + 4 ] !== v.w ) {\n\n\t\t\ta[ offset + 0 ] = v.x;\n\t\t\ta[ offset + 1 ] = v.y;\n\t\t\ta[ offset + 2 ] = v.z;\n\t\t\ta[ offset + 3 ] = v.w;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateColor( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst c = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== c.r || a[ offset + 1 ] !== c.g || a[ offset + 2 ] !== c.b ) {\n\n\t\t\ta[ offset + 0 ] = c.r;\n\t\t\ta[ offset + 1 ] = c.g;\n\t\t\ta[ offset + 2 ] = c.b;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateMatrix3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== e[ 0 ] || a[ offset + 1 ] !== e[ 1 ] || a[ offset + 2 ] !== e[ 2 ] ||\n\t\t\ta[ offset + 4 ] !== e[ 3 ] || a[ offset + 5 ] !== e[ 4 ] || a[ offset + 6 ] !== e[ 5 ] ||\n\t\t\ta[ offset + 8 ] !== e[ 6 ] || a[ offset + 9 ] !== e[ 7 ] || a[ offset + 10 ] !== e[ 8 ] ) {\n\n\t\t\ta[ offset + 0 ] = e[ 0 ];\n\t\t\ta[ offset + 1 ] = e[ 1 ];\n\t\t\ta[ offset + 2 ] = e[ 2 ];\n\t\t\ta[ offset + 4 ] = e[ 3 ];\n\t\t\ta[ offset + 5 ] = e[ 4 ];\n\t\t\ta[ offset + 6 ] = e[ 5 ];\n\t\t\ta[ offset + 8 ] = e[ 6 ];\n\t\t\ta[ offset + 9 ] = e[ 7 ];\n\t\t\ta[ offset + 10 ] = e[ 8 ];\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateMatrix4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( arraysEqual( a, e, offset ) === false ) {\n\n\t\t\ta.set( e, offset );\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n}\n\nfunction arraysEqual( a, b, offset ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\tif ( a[ offset + i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nexport default WebGPUUniformsGroup;\n", "import { Color, Matrix3, Matrix4, Vector2, Vector3, Vector4 } from 'three';\n\nclass WebGPUUniform {\n\n\tconstructor( name, value = null ) {\n\n\t\tthis.name = name;\n\t\tthis.value = value;\n\n\t\tthis.boundary = 0; // used to build the uniform buffer according to the STD140 layout\n\t\tthis.itemSize = 0;\n\n\t\tthis.offset = 0; // this property is set by WebGPUUniformsGroup and marks the start position in the uniform buffer\n\n\t}\n\n\tsetValue( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.value;\n\n\t}\n\n}\n\nclass FloatUniform extends WebGPUUniform {\n\n\tconstructor( name, value = 0 ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isFloatUniform = true;\n\n\t\tthis.boundary = 4;\n\t\tthis.itemSize = 1;\n\n\t}\n\n}\n\nclass Vector2Uniform extends WebGPUUniform {\n\n\tconstructor( name, value = new Vector2() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isVector2Uniform = true;\n\n\t\tthis.boundary = 8;\n\t\tthis.itemSize = 2;\n\n\t}\n\n}\n\nclass Vector3Uniform extends WebGPUUniform {\n\n\tconstructor( name, value = new Vector3() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isVector3Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 3;\n\n\t}\n\n}\n\nclass Vector4Uniform extends WebGPUUniform {\n\n\tconstructor( name, value = new Vector4() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isVector4Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 4;\n\n\t}\n\n}\n\nclass ColorUniform extends WebGPUUniform {\n\n\tconstructor( name, value = new Color() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isColorUniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 3;\n\n\t}\n\n}\n\nclass Matrix3Uniform extends WebGPUUniform {\n\n\tconstructor( name, value = new Matrix3() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isMatrix3Uniform = true;\n\n\t\tthis.boundary = 48;\n\t\tthis.itemSize = 12;\n\n\t}\n\n}\n\nclass Matrix4Uniform extends WebGPUUniform {\n\n\tconstructor( name, value = new Matrix4() ) {\n\n\t\tsuper( name, value );\n\n\t\tthis.isMatrix4Uniform = true;\n\n\t\tthis.boundary = 64;\n\t\tthis.itemSize = 16;\n\n\t}\n\n}\n\nexport { FloatUniform, Vector2Uniform, Vector3Uniform, Vector4Uniform, ColorUniform, Matrix3Uniform, Matrix4Uniform };\n", "import {\n\tFloatUniform, Vector2Uniform, Vector3Uniform, Vector4Uniform,\n\tColorUniform, Matrix3Uniform, Matrix4Uniform\n} from '../WebGPUUniform.js';\n\nclass FloatNodeUniform extends FloatUniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Vector2NodeUniform extends Vector2Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Vector3NodeUniform extends Vector3Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Vector4NodeUniform extends Vector4Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass ColorNodeUniform extends ColorUniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Matrix3NodeUniform extends Matrix3Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nclass Matrix4NodeUniform extends Matrix4Uniform {\n\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\nexport {\n\tFloatNodeUniform, Vector2NodeUniform, Vector3NodeUniform, Vector4NodeUniform,\n\tColorNodeUniform, Matrix3NodeUniform, Matrix4NodeUniform\n};\n", "import WebGPUBinding from './WebGPUBinding.js';\nimport { GPUBindingType } from './constants.js';\n\nclass WebGPUSampler extends WebGPUBinding {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\tthis.isSampler = true;\n\n\t\tthis.texture = texture;\n\n\t\tthis.type = GPUBindingType.Sampler;\n\t\tthis.visibility = GPUShaderStage.FRAGMENT;\n\n\t\tthis.samplerGPU = null; // set by the renderer\n\n\t}\n\n\tgetTexture() {\n\n\t\treturn this.texture;\n\n\t}\n\n}\n\nexport default WebGPUSampler;\n", "import WebGPUSampler from '../WebGPUSampler.js';\n\nclass WebGPUNodeSampler extends WebGPUSampler {\n\n\tconstructor( name, textureNode ) {\n\n\t\tsuper( name, textureNode.value );\n\n\t\tthis.textureNode = textureNode;\n\n\t}\n\n\tgetTexture() {\n\n\t\treturn this.textureNode.value;\n\n\t}\n\n}\n\nexport default WebGPUNodeSampler;\n", "import WebGPUBinding from './WebGPUBinding.js';\nimport { GPUBindingType, GPUTextureViewDimension, GPUTextureAspect } from './constants.js';\n\nclass WebGPUSampledTexture extends WebGPUBinding {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\tthis.isSampledTexture = true;\n\n\t\tthis.texture = texture;\n\n\t\tthis.dimension = GPUTextureViewDimension.TwoD;\n\n\t\tthis.type = GPUBindingType.SampledTexture;\n\t\tthis.visibility = GPUShaderStage.FRAGMENT;\n\n\t\tthis.aspect = texture.isDepthTexture ? GPUTextureAspect.DepthOnly : GPUTextureAspect.All;\n\n\t\tthis.textureGPU = null; // set by the renderer\n\n\t}\n\n\tgetTexture() {\n\n\t\treturn this.texture;\n\n\t}\n\n}\n\nclass WebGPUSampledArrayTexture extends WebGPUSampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampledArrayTexture = true;\n\n\t\tthis.dimension = GPUTextureViewDimension.TwoDArray;\n\n\t}\n\n}\n\nclass WebGPUSampled3DTexture extends WebGPUSampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampled3DTexture = true;\n\n\t\tthis.dimension = GPUTextureViewDimension.ThreeD;\n\n\t}\n\n}\n\nclass WebGPUSampledCubeTexture extends WebGPUSampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampledCubeTexture = true;\n\n\t\tthis.dimension = GPUTextureViewDimension.Cube;\n\n\t}\n\n}\n\nexport { WebGPUSampledTexture, WebGPUSampledArrayTexture, WebGPUSampled3DTexture, WebGPUSampledCubeTexture };\n", "import { WebGPUSampledTexture, WebGPUSampledCubeTexture } from '../WebGPUSampledTexture.js';\n\nclass WebGPUNodeSampledTexture extends WebGPUSampledTexture {\n\n\tconstructor( name, textureNode ) {\n\n\t\tsuper( name, textureNode.value );\n\n\t\tthis.textureNode = textureNode;\n\n\t}\n\n\tgetTexture() {\n\n\t\treturn this.textureNode.value;\n\n\t}\n\n}\n\nclass WebGPUNodeSampledCubeTexture extends WebGPUSampledCubeTexture {\n\n\tconstructor( name, textureNode ) {\n\n\t\tsuper( name, textureNode.value );\n\n\t\tthis.textureNode = textureNode;\n\n\t}\n\n\tgetTexture() {\n\n\t\treturn this.textureNode.value;\n\n\t}\n\n}\n\nexport { WebGPUNodeSampledTexture, WebGPUNodeSampledCubeTexture };\n", "import WebGPUBuffer from './WebGPUBuffer.js';\nimport { GPUBindingType } from './constants.js';\n\nclass WebGPUStorageBuffer extends WebGPUBuffer {\n\n\tconstructor( name, attribute ) {\n\n\t\tsuper( name, GPUBindingType.StorageBuffer, attribute.array );\n\n\t\tthis.isStorageBuffer = true;\n\n\t\tthis.usage |= GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE;\n\n\t\tthis.attribute = attribute;\n\n\t}\n\n}\n\nexport default WebGPUStorageBuffer;\n", "import { WebGLRenderTarget } from 'three';\n\n// @TODO: Consider rename WebGLRenderTarget to just RenderTarget\n\nclass WebGPURenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t}\n\n}\n\nexport default WebGPURenderTarget;\n", "import WebGPUUniformsGroup from '../WebGPUUniformsGroup.js';\nimport {\n\tFloatNodeUniform, Vector2NodeUniform, Vector3NodeUniform, Vector4NodeUniform,\n\tColorNodeUniform, Matrix3NodeUniform, Matrix4NodeUniform\n} from './WebGPUNodeUniform.js';\nimport WebGPUNodeSampler from './WebGPUNodeSampler.js';\nimport { WebGPUNodeSampledTexture, WebGPUNodeSampledCubeTexture } from './WebGPUNodeSampledTexture.js';\n\nimport WebGPUUniformBuffer from '../WebGPUUniformBuffer.js';\nimport WebGPUStorageBuffer from '../WebGPUStorageBuffer.js';\nimport { getVectorLength, getStrideLength } from '../WebGPUBufferUtils.js';\n\nimport WebGPURenderTarget from '../WebGPURenderTarget.js';\n\nimport { NodeBuilder, WGSLNodeParser, CodeNode, NodeMaterial } from '../../../nodes/Nodes.js';\n\nconst gpuShaderStageLib = {\n\t'vertex': GPUShaderStage.VERTEX,\n\t'fragment': GPUShaderStage.FRAGMENT,\n\t'compute': GPUShaderStage.COMPUTE\n};\n\nconst supports = {\n\tinstance: true\n};\n\nconst wgslTypeLib = {\n\tfloat: 'f32',\n\tint: 'i32',\n\tuint: 'u32',\n\tbool: 'bool',\n\tcolor: 'vec3<f32>',\n\n\tvec2: 'vec2<f32>',\n\tivec2: 'vec2<i32>',\n\tuvec2: 'vec2<u32>',\n\tbvec2: 'vec2<bool>',\n\n\tvec3: 'vec3<f32>',\n\tivec3: 'vec3<i32>',\n\tuvec3: 'vec3<u32>',\n\tbvec3: 'vec3<bool>',\n\n\tvec4: 'vec4<f32>',\n\tivec4: 'vec4<i32>',\n\tuvec4: 'vec4<u32>',\n\tbvec4: 'vec4<bool>',\n\n\tmat3: 'mat3x3<f32>',\n\timat3: 'mat3x3<i32>',\n\tumat3: 'mat3x3<u32>',\n\tbmat3: 'mat3x3<bool>',\n\n\tmat4: 'mat4x4<f32>',\n\timat4: 'mat4x4<i32>',\n\tumat4: 'mat4x4<u32>',\n\tbmat4: 'mat4x4<bool>'\n};\n\nconst wgslMethods = {\n\tdFdx: 'dpdx',\n\tdFdy: 'dpdy',\n\tmod: 'threejs_mod',\n\tlessThanEqual: 'threejs_lessThanEqual',\n\tinversesqrt: 'inverseSqrt'\n};\n\nconst wgslPolyfill = {\n\tlessThanEqual: new CodeNode( `\nfn threejs_lessThanEqual( a : vec3<f32>, b : vec3<f32> ) -> vec3<bool> {\n\n\treturn vec3<bool>( a.x <= b.x, a.y <= b.y, a.z <= b.z );\n\n}\n` ),\n\tmod: new CodeNode( `\nfn threejs_mod( x : f32, y : f32 ) -> f32 {\n\n\treturn x - y * floor( x / y );\n\n}\n` ),\n\trepeatWrapping: new CodeNode( `\nfn threejs_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {\n\n\tlet uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );\n\n\treturn ( ( uvScaled % dimension ) + dimension ) % dimension;\n\n}\n` )\n};\n\nclass WebGPUNodeBuilder extends NodeBuilder {\n\n\tconstructor( object, renderer ) {\n\n\t\tsuper( object, renderer, new WGSLNodeParser() );\n\n\t\tthis.bindings = { vertex: [], fragment: [], compute: [] };\n\t\tthis.bindingsOffset = { vertex: 0, fragment: 0, compute: 0 };\n\n\t\tthis.uniformsGroup = {};\n\n\t\tthis.builtins = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map(),\n\t\t\tattribute: new Map()\n\t\t};\n\n\t}\n\n\tbuild() {\n\n\t\tconst { object, material } = this;\n\n\t\tif ( material !== null ) {\n\n\t\t\tNodeMaterial.fromMaterial( material ).build( this );\n\n\t\t} else {\n\n\t\t\tthis.addFlow( 'compute', object );\n\n\t\t}\n\n\t\treturn super.build();\n\n\t}\n\n\tgetSampler( textureProperty, uvSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet} )`;\n\n\t\t} else {\n\n\t\t\tthis._include( 'repeatWrapping' );\n\n\t\t\tconst dimension = `textureDimensions( ${textureProperty}, 0 )`;\n\n\t\t\treturn `textureLoad( ${textureProperty}, threejs_repeatWrapping( ${uvSnippet}, ${dimension} ), 0 )`;\n\n\t\t}\n\n\t}\n\n\tgetVideoSampler( textureProperty, uvSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleBaseClampToEdge( ${textureProperty}, ${textureProperty}_sampler, vec2<f32>( ${uvSnippet}.x, 1.0 - ${uvSnippet}.y ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.VideoTexture does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgetSamplerLevel( textureProperty, uvSnippet, biasSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${biasSnippet} )`;\n\n\t\t} else {\n\n\t\t\tthis._include( 'repeatWrapping' );\n\n\t\t\tconst dimension = `textureDimensions( ${textureProperty}, 0 )`;\n\n\t\t\treturn `textureLoad( ${textureProperty}, threejs_repeatWrapping( ${uvSnippet}, ${dimension} ), i32( ${biasSnippet} ) )`;\n\n\t\t}\n\n\t}\n\n\tgetTexture( texture, textureProperty, uvSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this.getVideoSampler( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this.getSampler( textureProperty, uvSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetTextureLevel( texture, textureProperty, uvSnippet, biasSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this.getVideoSampler( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this.getSamplerLevel( textureProperty, uvSnippet, biasSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetPropertyName( node, shaderStage = this.shaderStage ) {\n\n\t\tif ( node.isNodeVarying === true && node.needsInterpolation === true ) {\n\n\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\treturn `NodeVaryings.${ node.name }`;\n\n\t\t\t}\n\n\t\t} else if ( node.isNodeUniform === true ) {\n\n\t\t\tconst name = node.name;\n\t\t\tconst type = node.type;\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' ) {\n\n\t\t\t\treturn name;\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' ) {\n\n\t\t\t\treturn `NodeBuffer_${node.node.id}.${name}`;\n\n\t\t\t} else {\n\n\t\t\t\treturn `NodeUniforms.${name}`;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.getPropertyName( node );\n\n\t}\n\n\tgetBindings() {\n\n\t\tconst bindings = this.bindings;\n\n\t\treturn this.material !== null ? [ ...bindings.vertex, ...bindings.fragment ] : bindings.compute;\n\n\t}\n\n\tgetUniformFromNode( node, shaderStage, type ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, shaderStage, type );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\tif ( nodeData.uniformGPU === undefined ) {\n\n\t\t\tlet uniformGPU;\n\n\t\t\tconst bindings = this.bindings[ shaderStage ];\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' ) {\n\n\t\t\t\tconst sampler = new WebGPUNodeSampler( `${uniformNode.name}_sampler`, uniformNode.node );\n\n\t\t\t\tlet texture = null;\n\n\t\t\t\tif ( type === 'texture' ) {\n\n\t\t\t\t\ttexture = new WebGPUNodeSampledTexture( uniformNode.name, uniformNode.node );\n\n\t\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\t\ttexture = new WebGPUNodeSampledCubeTexture( uniformNode.name, uniformNode.node );\n\n\t\t\t\t}\n\n\t\t\t\t// add first textures in sequence and group for last\n\t\t\t\tconst lastBinding = bindings[ bindings.length - 1 ];\n\t\t\t\tconst index = lastBinding && lastBinding.isUniformsGroup ? bindings.length - 1 : bindings.length;\n\n\t\t\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\tbindings.splice( index, 0, sampler, texture );\n\n\t\t\t\t\tuniformGPU = [ sampler, texture ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbindings.splice( index, 0, texture );\n\n\t\t\t\t\tuniformGPU = [ texture ];\n\n\t\t\t\t}\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' ) {\n\n\t\t\t\tconst bufferClass = type === 'storageBuffer' ? WebGPUStorageBuffer : WebGPUUniformBuffer;\n\t\t\t\tconst buffer = new bufferClass( 'NodeBuffer_' + node.id, node.value );\n\t\t\t\tbuffer.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t// add first textures in sequence and group for last\n\t\t\t\tconst lastBinding = bindings[ bindings.length - 1 ];\n\t\t\t\tconst index = lastBinding && lastBinding.isUniformsGroup ? bindings.length - 1 : bindings.length;\n\n\t\t\t\tbindings.splice( index, 0, buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t} else {\n\n\t\t\t\tlet uniformsGroup = this.uniformsGroup[ shaderStage ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new WebGPUUniformsGroup( 'nodeUniforms' );\n\t\t\t\t\tuniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tthis.uniformsGroup[ shaderStage ] = uniformsGroup;\n\n\t\t\t\t\tbindings.push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tif ( node.isArrayUniformNode === true ) {\n\n\t\t\t\t\tuniformGPU = [];\n\n\t\t\t\t\tfor ( const uniformNode of node.nodes ) {\n\n\t\t\t\t\t\tconst uniformNodeGPU = this._getNodeUniform( uniformNode, type );\n\n\t\t\t\t\t\t// fit bounds to buffer\n\t\t\t\t\t\tuniformNodeGPU.boundary = getVectorLength( uniformNodeGPU.itemSize );\n\t\t\t\t\t\tuniformNodeGPU.itemSize = getStrideLength( uniformNodeGPU.itemSize );\n\n\t\t\t\t\t\tuniformsGroup.addUniform( uniformNodeGPU );\n\n\t\t\t\t\t\tuniformGPU.push( uniformNodeGPU );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniformGPU = this._getNodeUniform( uniformNode, type );\n\n\t\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\tthis.bindingsOffset[ 'fragment' ] = bindings.length;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n\tisReference( type ) {\n\n\t\treturn super.isReference( type ) || type === 'texture_2d' || type === 'texture_cube';\n\n\t}\n\n\tgetBuiltin( name, property, type, shaderStage = this.shaderStage ) {\n\n\t\tconst map = this.builtins[ shaderStage ];\n\n\t\tif ( map.has( name ) === false ) {\n\n\t\t\tmap.set( name, {\n\t\t\t\tname,\n\t\t\t\tproperty,\n\t\t\t\ttype\n\t\t\t} );\n\n\t\t}\n\n\t\treturn property;\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'instance_index', 'instanceIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'instanceIndex';\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\treturn this.getBuiltin( 'front_facing', 'isFront', 'bool' );\n\n\t}\n\n\tgetFragCoord() {\n\n\t\treturn this.getBuiltin( 'position', 'fragCoord', 'vec4<f32>', 'fragment' );\n\n\t}\n\n\tisFlipY() {\n\n\t\treturn false;\n\n\t}\n\n\tgetAttributes( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tthis.getBuiltin( 'global_invocation_id', 'id', 'vec3<u32>', 'attribute' );\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tfor ( const { name, property, type } of this.builtins.attribute.values() ) {\n\n\t\t\t\tsnippets.push( `@builtin( ${name} ) ${property} : ${type}` );\n\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\t\t\tconst length = attributes.length;\n\n\t\t\tfor ( let index = 0; index < length; index ++ ) {\n\n\t\t\t\tconst attribute = attributes[ index ];\n\t\t\t\tconst name = attribute.name;\n\t\t\t\tconst type = this.getType( attribute.type );\n\n\t\t\t\tsnippets.push( `@location( ${index} ) ${ name } : ${ type }` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tfor ( const variable of vars ) {\n\n\t\t\tconst name = variable.name;\n\t\t\tconst type = this.getType( variable.type );\n\n\t\t\tsnippets.push( `\\tvar ${name} : ${type};` );\n\n\t\t}\n\n\t\treturn `\\n${ snippets.join( '\\n' ) }\\n`;\n\n\t}\n\n\tgetVaryings( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tthis.getBuiltin( 'position', 'Vertex', 'vec4<f32>', 'vertex' );\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'fragment' ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst vars = this.vars[ shaderStage ];\n\n\t\t\tfor ( let index = 0; index < varyings.length; index ++ ) {\n\n\t\t\t\tconst varying = varyings[ index ];\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tsnippets.push( `@location( ${index} ) ${ varying.name } : ${ this.getType( varying.type ) }` );\n\n\t\t\t\t} else if ( vars.includes( varying ) === false ) {\n\n\t\t\t\t\tvars.push( varying );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const { name, property, type } of this.builtins[ shaderStage ].values() ) {\n\n\t\t\tsnippets.push( `@builtin( ${name} ) ${property} : ${type}` );\n\n\t\t}\n\n\t\tconst code = snippets.join( ',\\n\\t' );\n\n\t\treturn shaderStage === 'vertex' ? this._getWGSLStruct( 'NodeVaryingsStruct', '\\t' + code ) : code;\n\n\t}\n\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst bufferSnippets = [];\n\t\tconst groupSnippets = [];\n\n\t\tlet index = this.bindingsOffset[ shaderStage ];\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tif ( uniform.type === 'texture' || uniform.type === 'cubeTexture' ) {\n\n\t\t\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\tbindingSnippets.push( `@group( 0 ) @binding( ${index ++} ) var ${uniform.name}_sampler : sampler;` );\n\n\t\t\t\t}\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tlet textureType;\n\n\t\t\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_cube<f32>';\n\n\t\t\t\t} else if ( texture.isDepthTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_depth_2d';\n\n\t\t\t\t} else if ( texture.isVideoTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_external';\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureType = 'texture_2d<f32>';\n\n\t\t\t\t}\n\n\t\t\t\tbindingSnippets.push( `@group( 0 ) @binding( ${index ++} ) var ${uniform.name} : ${textureType};` );\n\n\t\t\t} else if ( uniform.type === 'buffer' || uniform.type === 'storageBuffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.bufferType );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 ? ', ' + bufferCount : '';\n\t\t\t\tconst bufferSnippet = `\\t${uniform.name} : array< ${bufferType}${bufferCountSnippet} >\\n`;\n\t\t\t\tconst bufferAccessMode = bufferNode.isStorageBufferNode ? 'storage,read_write' : 'uniform';\n\n\t\t\t\tbufferSnippets.push( this._getWGSLStructBinding( 'NodeBuffer_' + bufferNode.id, bufferSnippet, bufferAccessMode, index ++ ) );\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getType( this.getVectorType( uniform.type ) );\n\n\t\t\t\tif ( Array.isArray( uniform.value ) === true ) {\n\n\t\t\t\t\tconst length = uniform.value.length;\n\n\t\t\t\t\tgroupSnippets.push( `uniform ${vectorType}[ ${length} ] ${uniform.name}` );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgroupSnippets.push( `\\t${uniform.name} : ${ vectorType}` );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet code = bindingSnippets.join( '\\n' );\n\t\tcode += bufferSnippets.join( '\\n' );\n\n\t\tif ( groupSnippets.length > 0 ) {\n\n\t\t\tcode += this._getWGSLStructBinding( 'NodeUniforms', groupSnippets.join( ',\\n' ), 'uniform', index ++ );\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n\\t`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += 'NodeVaryings.Vertex = ';\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tflow += 'return ';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\t\t\tstageData.flow = flow;\n\n\t\t}\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getWGSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getWGSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tthis.computeShader = this._getWGSLComputeCode( shadersData.compute, ( this.object.workgroupSize || [ 64 ] ).join( ', ' ) );\n\n\t\t}\n\n\t}\n\n\tgetRenderTarget( width, height, options ) {\n\n\t\treturn new WebGPURenderTarget( width, height, options );\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\tif ( wgslPolyfill[ method ] !== undefined ) {\n\n\t\t\tthis._include( method );\n\n\t\t}\n\n\t\treturn wgslMethods[ method ] || method;\n\n\t}\n\n\tgetType( type ) {\n\n\t\treturn wgslTypeLib[ type ] || type;\n\n\t}\n\n\tisAvailable( name ) {\n\n\t\treturn supports[ name ] === true;\n\n\t}\n\n\t_include( name ) {\n\n\t\twgslPolyfill[ name ].build( this );\n\n\t}\n\n\t_getNodeUniform( uniformNode, type ) {\n\n\t\tif ( type === 'float' ) return new FloatNodeUniform( uniformNode );\n\t\tif ( type === 'vec2' ) return new Vector2NodeUniform( uniformNode );\n\t\tif ( type === 'vec3' ) return new Vector3NodeUniform( uniformNode );\n\t\tif ( type === 'vec4' ) return new Vector4NodeUniform( uniformNode );\n\t\tif ( type === 'color' ) return new ColorNodeUniform( uniformNode );\n\t\tif ( type === 'mat3' ) return new Matrix3NodeUniform( uniformNode );\n\t\tif ( type === 'mat4' ) return new Matrix4NodeUniform( uniformNode );\n\n\t\tthrow new Error( `Uniform \"${type}\" not declared.` );\n\n\t}\n\n\t_getWGSLVertexCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// codes\n${shaderData.codes}\n\n@vertex\nfn main( ${shaderData.attributes} ) -> NodeVaryingsStruct {\n\n\t// system\n\tvar NodeVaryings: NodeVaryingsStruct;\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n\treturn NodeVaryings;\n\n}\n`;\n\n\t}\n\n\t_getWGSLFragmentCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@fragment\nfn main( ${shaderData.varyings} ) -> @location( 0 ) vec4<f32> {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t_getWGSLComputeCode( shaderData, workgroupSize ) {\n\n\t\treturn `${ this.getSignature() }\n// system\nvar<private> instanceIndex : u32;\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@compute @workgroup_size( ${workgroupSize} )\nfn main( ${shaderData.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x;\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t_getWGSLStruct( name, vars ) {\n\n\t\treturn `\nstruct ${name} {\n${vars}\n};`;\n\n\t}\n\n\t_getWGSLStructBinding( name, vars, access, binding = 0, group = 0 ) {\n\n\t\tconst structName = name + 'Struct';\n\t\tconst structSnippet = this._getWGSLStruct( structName, vars );\n\n\t\treturn `${structSnippet}\n@binding( ${binding} ) @group( ${group} )\nvar<${access}> ${name} : ${structName};`;\n\n\t}\n\n}\n\nexport default WebGPUNodeBuilder;\n", "import WebGPUNodeBuilder from './WebGPUNodeBuilder.js';\nimport { NoToneMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\nimport { NodeFrame, cubeTexture, texture, rangeFog, densityFog, reference, toneMapping, positionWorld, modelWorldMatrix, transformDirection, equirectUV, viewportBottomLeft } from '../../../nodes/Nodes.js';\n\nclass WebGPUNodes {\n\n\tconstructor( renderer, properties ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.properties = properties;\n\n\t\tthis.nodeFrame = new NodeFrame();\n\n\t}\n\n\tget( renderObject ) {\n\n\t\tconst renderObjectProperties = this.properties.get( renderObject );\n\n\t\tlet nodeBuilder = renderObjectProperties.nodeBuilder;\n\n\t\tif ( nodeBuilder === undefined ) {\n\n\t\t\tnodeBuilder = new WebGPUNodeBuilder( renderObject.object, this.renderer );\n\t\t\tnodeBuilder.material = renderObject.material;\n\t\t\tnodeBuilder.lightsNode = renderObject.lightsNode;\n\t\t\tnodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );\n\t\t\tnodeBuilder.fogNode = this.getFogNode( renderObject.scene );\n\t\t\tnodeBuilder.toneMappingNode = this.getToneMappingNode();\n\t\t\tnodeBuilder.build();\n\n\t\t\trenderObjectProperties.nodeBuilder = nodeBuilder;\n\n\t\t}\n\n\t\treturn nodeBuilder;\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tconst computeProperties = this.properties.get( computeNode );\n\n\t\tlet nodeBuilder = computeProperties.nodeBuilder;\n\n\t\tif ( nodeBuilder === undefined ) {\n\n\t\t\tnodeBuilder = new WebGPUNodeBuilder( computeNode, this.renderer );\n\t\t\tnodeBuilder.build();\n\n\t\t\tcomputeProperties.nodeBuilder = nodeBuilder;\n\n\t\t}\n\n\t\treturn nodeBuilder;\n\n\t}\n\n\tremove( renderObject ) {\n\n\t\tconst objectProperties = this.properties.get( renderObject );\n\n\t\tdelete objectProperties.nodeBuilder;\n\n\t}\n\n\tgetEnvironmentNode( scene ) {\n\n\t\treturn scene.environmentNode || this.properties.get( scene ).environmentNode || null;\n\n\t}\n\n\tgetFogNode( scene ) {\n\n\t\treturn scene.fogNode || this.properties.get( scene ).fogNode || null;\n\n\t}\n\n\tgetToneMappingNode() {\n\n\t\treturn this.renderer.toneMappingNode || this.properties.get( this.renderer ).toneMappingNode || null;\n\n\t}\n\n\tgetCacheKey( scene, lightsNode ) {\n\n\t\tconst environmentNode = this.getEnvironmentNode( scene );\n\t\tconst fogNode = this.getFogNode( scene );\n\t\tconst toneMappingNode = this.getToneMappingNode();\n\n\t\tconst cacheKey = [];\n\n\t\tif ( lightsNode ) cacheKey.push( 'lightsNode:' + lightsNode.getCacheKey() );\n\t\tif ( environmentNode ) cacheKey.push( 'environmentNode:' + environmentNode.getCacheKey() );\n\t\tif ( fogNode ) cacheKey.push( 'fogNode:' + fogNode.getCacheKey() );\n\t\tif ( toneMappingNode ) cacheKey.push( 'toneMappingNode:' + toneMappingNode.getCacheKey() );\n\n\t\treturn '{' + cacheKey.join( ',' ) + '}';\n\n\t}\n\n\tupdateToneMapping() {\n\n\t\tconst renderer = this.renderer;\n\t\tconst rendererProperties = this.properties.get( renderer );\n\t\tconst rendererToneMapping = renderer.toneMapping;\n\n\t\tif ( rendererToneMapping !== NoToneMapping ) {\n\n\t\t\tif ( rendererProperties.toneMapping !== rendererToneMapping ) {\n\n\t\t\t\trendererProperties.toneMappingNode = toneMapping( rendererToneMapping, reference( 'toneMappingExposure', 'float', renderer ) );\n\t\t\t\trendererProperties.toneMapping = rendererToneMapping;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdelete rendererProperties.toneMappingNode;\n\t\t\tdelete rendererProperties.toneMapping;\n\n\t\t}\n\n\t}\n\n\tupdateBackground( scene ) {\n\n\t\tconst sceneProperties = this.properties.get( scene );\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( sceneProperties.background !== background ) {\n\n\t\t\t\tlet backgroundNode = null;\n\n\t\t\t\tif ( background.isCubeTexture === true ) {\n\n\t\t\t\t\tbackgroundNode = cubeTexture( background, transformDirection( positionWorld, modelWorldMatrix ) );\n\n\t\t\t\t} else if ( background.isTexture === true ) {\n\n\t\t\t\t\tlet nodeUV = null;\n\n\t\t\t\t\tif ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\t\t\tnodeUV = equirectUV();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnodeUV = viewportBottomLeft;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbackgroundNode = texture( background, nodeUV );\n\n\t\t\t\t} else if ( background.isColor !== true ) {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported background configuration.', background );\n\n\t\t\t\t}\n\n\t\t\t\tsceneProperties.backgroundNode = backgroundNode;\n\t\t\t\tsceneProperties.background = background;\n\n\t\t\t}\n\n\t\t} else if ( sceneProperties.backgroundNode ) {\n\n\t\t\tdelete sceneProperties.backgroundNode;\n\t\t\tdelete sceneProperties.background;\n\n\t\t}\n\n\t}\n\n\tupdateFog( scene ) {\n\n\t\tconst sceneProperties = this.properties.get( scene );\n\t\tconst fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tif ( sceneProperties.fog !== fog ) {\n\n\t\t\t\tlet fogNode = null;\n\n\t\t\t\tif ( fog.isFogExp2 ) {\n\n\t\t\t\t\tfogNode = densityFog( reference( 'color', 'color', fog ), reference( 'density', 'float', fog ) );\n\n\t\t\t\t} else if ( fog.isFog ) {\n\n\t\t\t\t\tfogNode = rangeFog( reference( 'color', 'color', fog ), reference( 'near', 'float', fog ), reference( 'far', 'float', fog ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported fog configuration.', fog );\n\n\t\t\t\t}\n\n\t\t\t\tsceneProperties.fogNode = fogNode;\n\t\t\t\tsceneProperties.fog = fog;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdelete sceneProperties.fogNode;\n\t\t\tdelete sceneProperties.fog;\n\n\t\t}\n\n\t}\n\n\tupdateEnvironment( scene ) {\n\n\t\tconst sceneProperties = this.properties.get( scene );\n\t\tconst environment = scene.environment;\n\n\t\tif ( environment ) {\n\n\t\t\tif ( sceneProperties.environment !== environment ) {\n\n\t\t\t\tlet environmentNode = null;\n\n\t\t\t\tif ( environment.isCubeTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = cubeTexture( environment );\n\n\t\t\t\t} else if ( environment.isTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = texture( environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported environment configuration.', environment );\n\n\t\t\t\t}\n\n\t\t\t\tsceneProperties.environmentNode = environmentNode;\n\t\t\t\tsceneProperties.environment = environment;\n\n\t\t\t}\n\n\t\t} else if ( sceneProperties.environmentNode ) {\n\n\t\t\tdelete sceneProperties.environmentNode;\n\t\t\tdelete sceneProperties.environment;\n\n\t\t}\n\n\t}\n\n\tgetNodeFrame( renderObject ) {\n\n\t\tconst nodeFrame = this.nodeFrame;\n\t\tnodeFrame.scene = renderObject.scene;\n\t\tnodeFrame.object = renderObject.object;\n\t\tnodeFrame.camera = renderObject.camera;\n\t\tnodeFrame.renderer = renderObject.renderer;\n\t\tnodeFrame.material = renderObject.material;\n\n\t\treturn nodeFrame;\n\n\t}\n\n\tupdateBefore( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrame( renderObject );\n\t\tconst nodeBuilder = this.get( renderObject );\n\n\t\tfor ( const node of nodeBuilder.updateBeforeNodes ) {\n\n\t\t\tnodeFrame.updateBeforeNode( node );\n\n\t\t}\n\n\t}\n\n\tupdate( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrame( renderObject );\n\t\tconst nodeBuilder = this.get( renderObject );\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.nodeFrame = new NodeFrame();\n\n\t}\n\n}\n\nexport default WebGPUNodes;\n", "import { GPUPrimitiveTopology, GPUTextureFormat } from './constants.js';\n\nclass WebGPUUtils {\n\n\tconstructor( renderer ) {\n\n\t\tthis.renderer = renderer;\n\n\t}\n\n\tgetCurrentColorSpace() {\n\n\t\tconst renderer = this.renderer;\n\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\treturn renderTarget.texture.colorSpace;\n\n\t\t}\n\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\tgetCurrentColorFormat() {\n\n\t\tlet format;\n\n\t\tconst renderer = this.renderer;\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tconst renderTargetProperties = renderer._properties.get( renderTarget );\n\t\t\tformat = renderTargetProperties.colorTextureFormat;\n\n\t\t} else {\n\n\t\t\tformat = GPUTextureFormat.BGRA8Unorm; // default context format\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetCurrentDepthStencilFormat() {\n\n\t\tlet format;\n\n\t\tconst renderer = this.renderer;\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tconst renderTargetProperties = renderer._properties.get( renderTarget );\n\t\t\tformat = renderTargetProperties.depthTextureFormat;\n\n\t\t} else {\n\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetPrimitiveTopology( object, material ) {\n\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\n\n\t}\n\n\tgetSampleCount() {\n\n\t\treturn this.renderer._parameters.sampleCount;\n\n\t}\n\n}\n\nexport default WebGPUUtils;\n", "import { GPUIndexFormat, GPUTextureFormat, GPUFeatureName, GPULoadOp } from './constants.js';\nimport WebGPUAnimation from './WebGPUAnimation.js';\nimport WebGPURenderObjects from './WebGPURenderObjects.js';\nimport WebGPUAttributes from './WebGPUAttributes.js';\nimport WebGPUGeometries from './WebGPUGeometries.js';\nimport WebGPUInfo from './WebGPUInfo.js';\nimport WebGPUProperties from './WebGPUProperties.js';\nimport WebGPURenderPipelines from './WebGPURenderPipelines.js';\nimport WebGPUComputePipelines from './WebGPUComputePipelines.js';\nimport WebGPUBindings from './WebGPUBindings.js';\nimport WebGPURenderLists from './WebGPURenderLists.js';\nimport WebGPURenderStates from './WebGPURenderStates.js';\nimport WebGPUTextures from './WebGPUTextures.js';\nimport WebGPUBackground from './WebGPUBackground.js';\nimport WebGPUNodes from './nodes/WebGPUNodes.js';\nimport WebGPUUtils from './WebGPUUtils.js';\nimport { Frustum, Matrix4, Vector3, Color, SRGBColorSpace, NoToneMapping, DepthFormat } from 'three';\n\nconsole.info( 'THREE.WebGPURenderer: Modified Matrix4.makePerspective() and Matrix4.makeOrtographic() to work with WebGPU, see https://github.com/mrdoob/three.js/issues/20276.' );\n\nMatrix4.prototype.makePerspective = function ( left, right, top, bottom, near, far ) {\n\n\tconst te = this.elements;\n\tconst x = 2 * near / ( right - left );\n\tconst y = 2 * near / ( top - bottom );\n\n\tconst a = ( right + left ) / ( right - left );\n\tconst b = ( top + bottom ) / ( top - bottom );\n\tconst c = - far / ( far - near );\n\tconst d = - far * near / ( far - near );\n\n\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\treturn this;\n\n};\n\nMatrix4.prototype.makeOrthographic = function ( left, right, top, bottom, near, far ) {\n\n\tconst te = this.elements;\n\tconst w = 1.0 / ( right - left );\n\tconst h = 1.0 / ( top - bottom );\n\tconst p = 1.0 / ( far - near );\n\n\tconst x = ( right + left ) * w;\n\tconst y = ( top + bottom ) * h;\n\tconst z = near * p;\n\n\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0;\t\tte[ 12 ] = - x;\n\tte[ 1 ] = 0;\t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\t\tte[ 13 ] = - y;\n\tte[ 2 ] = 0;\t\tte[ 6 ] = 0;\t\tte[ 10 ] = - 1 * p;\tte[ 14 ] = - z;\n\tte[ 3 ] = 0;\t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\treturn this;\n\n};\n\nFrustum.prototype.setFromProjectionMatrix = function ( m ) {\n\n\tconst planes = this.planes;\n\tconst me = m.elements;\n\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\treturn this;\n\n};\n\nconst _frustum = new Frustum();\nconst _projScreenMatrix = new Matrix4();\nconst _vector3 = new Vector3();\n\nclass WebGPURenderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tthis.isWebGPURenderer = true;\n\n\t\t// public\n\n\t\tthis.domElement = ( parameters.canvas !== undefined ) ? parameters.canvas : this._createCanvasElement();\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\tthis.outputColorSpace = SRGBColorSpace;\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\tthis.sortObjects = true;\n\n\t\t// internals\n\n\t\tthis._parameters = Object.assign( {}, parameters );\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = this.domElement.width;\n\t\tthis._height = this.domElement.height;\n\n\t\tthis._viewport = null;\n\t\tthis._scissor = null;\n\n\t\tthis._adapter = null;\n\t\tthis._device = null;\n\t\tthis._context = null;\n\t\tthis._colorBuffer = null;\n\t\tthis._depthBuffer = null;\n\n\t\tthis._info = null;\n\t\tthis._properties = null;\n\t\tthis._attributes = null;\n\t\tthis._geometries = null;\n\t\tthis._nodes = null;\n\t\tthis._bindings = null;\n\t\tthis._objects = null;\n\t\tthis._renderPipelines = null;\n\t\tthis._computePipelines = null;\n\t\tthis._renderLists = null;\n\t\tthis._renderStates = null;\n\t\tthis._textures = null;\n\t\tthis._background = null;\n\n\t\tthis._animation = new WebGPUAnimation();\n\n\t\tthis._currentRenderState = null;\n\n\t\tthis._opaqueSort = null;\n\t\tthis._transparentSort = null;\n\n\t\tthis._clearAlpha = 1;\n\t\tthis._clearColor = new Color( 0x000000 );\n\t\tthis._clearDepth = 1;\n\t\tthis._clearStencil = 0;\n\n\t\tthis._renderTarget = null;\n\n\t\tthis._initialized = false;\n\n\t\t// some parameters require default values other than \"undefined\"\n\n\t\tthis._parameters.antialias = ( parameters.antialias === true );\n\n\t\tif ( this._parameters.antialias === true ) {\n\n\t\t\tthis._parameters.sampleCount = ( parameters.sampleCount === undefined ) ? 4 : parameters.sampleCount;\n\n\t\t} else {\n\n\t\t\tthis._parameters.sampleCount = 1;\n\n\t\t}\n\n\t\tthis._parameters.requiredLimits = ( parameters.requiredLimits === undefined ) ? {} : parameters.requiredLimits;\n\n\t\t// backwards compatibility\n\n\t\tthis.shadow = {\n\t\t\tshadowMap: {}\n\t\t};\n\n\t}\n\n\tasync init() {\n\n\t\tif ( this._initialized === true ) {\n\n\t\t\tthrow new Error( 'WebGPURenderer: Device has already been initialized.' );\n\n\t\t}\n\n\t\tconst parameters = this._parameters;\n\n\t\tconst adapterOptions = {\n\t\t\tpowerPreference: parameters.powerPreference\n\t\t};\n\n\t\tconst adapter = await navigator.gpu.requestAdapter( adapterOptions );\n\n\t\tif ( adapter === null ) {\n\n\t\t\tthrow new Error( 'WebGPURenderer: Unable to create WebGPU adapter.' );\n\n\t\t}\n\n\t\t// feature support\n\n\t\tconst features = Object.values( GPUFeatureName );\n\n\t\tconst supportedFeatures = [];\n\n\t\tfor ( const name of features ) {\n\n\t\t\tif ( adapter.features.has( name ) ) {\n\n\t\t\t\tsupportedFeatures.push( name );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst deviceDescriptor = {\n\t\t\trequiredFeatures: supportedFeatures,\n\t\t\trequiredLimits: parameters.requiredLimits\n\t\t};\n\n\t\tconst device = await adapter.requestDevice( deviceDescriptor );\n\n\t\tconst context = ( parameters.context !== undefined ) ? parameters.context : this.domElement.getContext( 'webgpu' );\n\n\t\tthis._adapter = adapter;\n\t\tthis._device = device;\n\t\tthis._context = context;\n\n\t\tthis._configureContext();\n\n\t\tthis._info = new WebGPUInfo();\n\t\tthis._properties = new WebGPUProperties();\n\t\tthis._attributes = new WebGPUAttributes( device );\n\t\tthis._geometries = new WebGPUGeometries( this._attributes, this._properties, this._info );\n\t\tthis._textures = new WebGPUTextures( device, this._properties, this._info );\n\t\tthis._utils = new WebGPUUtils( this );\n\t\tthis._nodes = new WebGPUNodes( this, this._properties );\n\t\tthis._objects = new WebGPURenderObjects( this, this._nodes, this._geometries, this._info );\n\t\tthis._computePipelines = new WebGPUComputePipelines( device, this._nodes );\n\t\tthis._renderPipelines = new WebGPURenderPipelines( device, this._nodes, this._utils );\n\t\tthis._bindings = this._renderPipelines.bindings = new WebGPUBindings( device, this._info, this._properties, this._textures, this._renderPipelines, this._computePipelines, this._attributes, this._nodes );\n\t\tthis._renderLists = new WebGPURenderLists();\n\t\tthis._renderStates = new WebGPURenderStates();\n\t\tthis._background = new WebGPUBackground( this, this._properties );\n\n\t\t//\n\n\t\tthis._setupColorBuffer();\n\t\tthis._setupDepthBuffer();\n\n\t\tthis._animation.setNodes( this._nodes );\n\t\tthis._animation.start();\n\n\t\tthis._initialized = true;\n\n\t}\n\n\tasync render( scene, camera ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\t// preserve render tree\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\t\tconst previousRenderState = this._currentRenderState;\n\n\t\t//\n\n\t\tconst renderState = this._renderStates.get( scene, camera );\n\t\tconst renderTarget = this._renderTarget;\n\n\t\tthis._currentRenderState = renderState;\n\n\t\tnodeFrame.renderId ++;\n\n\t\t//\n\n\t\tif ( this._animation.isAnimating === false ) nodeFrame.update();\n\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\tif ( this._info.autoReset === true ) this._info.reset();\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\trenderList.init();\n\n\t\tthis._projectObject( scene, camera, 0, renderList );\n\n\t\trenderList.finish();\n\n\t\tif ( this.sortObjects === true ) {\n\n\t\t\trenderList.sort( this._opaqueSort, this._transparentSort );\n\n\t\t}\n\n\t\t// prepare render pass descriptor\n\n\t\trenderState.descriptorGPU = {\n\t\t\tcolorAttachments: [ {\n\t\t\t\tview: null\n\t\t\t} ],\n\t\t\tdepthStencilAttachment: {\n\t\t\t\tview: null\n\t\t\t}\n\t\t};\n\n\t\tconst colorAttachment = renderState.descriptorGPU.colorAttachments[ 0 ];\n\t\tconst depthStencilAttachment = renderState.descriptorGPU.depthStencilAttachment;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.initRenderTarget( renderTarget );\n\n\t\t\t// @TODO: Support RenderTarget with antialiasing.\n\n\t\t\tconst renderTargetProperties = this._properties.get( renderTarget );\n\n\t\t\tcolorAttachment.view = renderTargetProperties.colorTextureGPU.createView();\n\t\t\tdepthStencilAttachment.view = renderTargetProperties.depthTextureGPU.createView();\n\n\t\t\trenderState.stencil = renderTarget.depthTexture ? renderTarget.depthTexture.format !== DepthFormat : true;\n\n\t\t} else {\n\n\t\t\tif ( this._parameters.antialias === true ) {\n\n\t\t\t\tcolorAttachment.view = this._colorBuffer.createView();\n\t\t\t\tcolorAttachment.resolveTarget = this._context.getCurrentTexture().createView();\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.view = this._context.getCurrentTexture().createView();\n\t\t\t\tcolorAttachment.resolveTarget = undefined;\n\n\t\t\t}\n\n\t\t\tdepthStencilAttachment.view = this._depthBuffer.createView();\n\n\t\t}\n\n\t\t//\n\n\t\tthis._nodes.updateEnvironment( scene );\n\t\tthis._nodes.updateFog( scene );\n\t\tthis._nodes.updateBackground( scene );\n\t\tthis._nodes.updateToneMapping();\n\n\t\t//\n\n\t\tthis._background.update( scene, renderList, renderState );\n\n\t\t// start render pass\n\n\t\tconst device = this._device;\n\n\t\trenderState.encoderGPU = device.createCommandEncoder( {} );\n\t\trenderState.currentPassGPU = renderState.encoderGPU.beginRenderPass( renderState.descriptorGPU );\n\n\t\t// global rasterization settings for all renderable objects\n\n\t\tconst vp = this._viewport;\n\n\t\tif ( vp !== null ) {\n\n\t\t\tconst width = Math.floor( vp.width * this._pixelRatio );\n\t\t\tconst height = Math.floor( vp.height * this._pixelRatio );\n\n\t\t\trenderState.currentPassGPU.setViewport( vp.x, vp.y, width, height, vp.minDepth, vp.maxDepth );\n\n\t\t}\n\n\t\tconst sc = this._scissor;\n\n\t\tif ( sc !== null ) {\n\n\t\t\tconst width = Math.floor( sc.width * this._pixelRatio );\n\t\t\tconst height = Math.floor( sc.height * this._pixelRatio );\n\n\t\t\trenderState.currentPassGPU.setScissorRect( sc.x, sc.y, width, height );\n\n\t\t}\n\n\t\t// process render lists\n\n\t\tconst opaqueObjects = renderList.opaque;\n\t\tconst transparentObjects = renderList.transparent;\n\t\tconst lightsNode = renderList.lightsNode;\n\n\t\tif ( opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, scene, lightsNode, renderState );\n\t\tif ( transparentObjects.length > 0 ) this._renderObjects( transparentObjects, camera, scene, lightsNode, renderState );\n\n\t\t// finish render pass\n\n\t\trenderState.currentPassGPU.end();\n\n\t\tdevice.queue.submit( [ renderState.encoderGPU.finish() ] );\n\n\t\t// restore render tree\n\n\t\tnodeFrame.renderId = previousRenderId;\n\t\tthis._currentRenderState = previousRenderState;\n\n\t}\n\n\tsetAnimationLoop( callback ) {\n\n\t\tif ( this._initialized === false ) this.init();\n\n\t\tconst animation = this._animation;\n\n\t\tanimation.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t}\n\n\tasync getArrayBuffer( attribute ) {\n\n\t\treturn await this._attributes.getArrayBuffer( attribute );\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this._context;\n\n\t}\n\n\tgetPixelRatio() {\n\n\t\treturn this._pixelRatio;\n\n\t}\n\n\tgetDrawingBufferSize( target ) {\n\n\t\treturn target.set( this._width * this._pixelRatio, this._height * this._pixelRatio ).floor();\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn target.set( this._width, this._height );\n\n\t}\n\n\tsetPixelRatio( value = 1 ) {\n\n\t\tthis._pixelRatio = value;\n\n\t\tthis.setSize( this._width, this._height, false );\n\n\t}\n\n\tsetDrawingBufferSize( width, height, pixelRatio ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.domElement.width = Math.floor( width * pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * pixelRatio );\n\n\t\tthis._configureContext();\n\t\tthis._setupColorBuffer();\n\t\tthis._setupDepthBuffer();\n\n\t}\n\n\tsetSize( width, height, updateStyle = true ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis.domElement.width = Math.floor( width * this._pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * this._pixelRatio );\n\n\t\tif ( updateStyle === true ) {\n\n\t\t\tthis.domElement.style.width = width + 'px';\n\t\t\tthis.domElement.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis._configureContext();\n\t\tthis._setupColorBuffer();\n\t\tthis._setupDepthBuffer();\n\n\t}\n\n\tsetOpaqueSort( method ) {\n\n\t\tthis._opaqueSort = method;\n\n\t}\n\n\tsetTransparentSort( method ) {\n\n\t\tthis._transparentSort = method;\n\n\t}\n\n\tgetScissor( target ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\ttarget.x = scissor.x;\n\t\ttarget.y = scissor.y;\n\t\ttarget.width = scissor.width;\n\t\ttarget.height = scissor.height;\n\n\t\treturn target;\n\n\t}\n\n\tsetScissor( x, y, width, height ) {\n\n\t\tif ( x === null ) {\n\n\t\t\tthis._scissor = null;\n\n\t\t} else {\n\n\t\t\tthis._scissor = {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\tcopyFramebufferToRenderTarget( renderTarget ) {\n\n\t\tconst renderState = this._currentRenderState;\n\t\tconst { encoderGPU, descriptorGPU } = renderState;\n\n\t\tconst texture = renderTarget.texture;\n\t\ttexture.internalFormat = GPUTextureFormat.BGRA8Unorm;\n\n\t\tthis._textures.initRenderTarget( renderTarget );\n\n\t\tconst sourceGPU = this._context.getCurrentTexture();\n\t\tconst destinationGPU = this._textures.getTextureGPU( texture );\n\n\t\trenderState.currentPassGPU.end();\n\n\t\tencoderGPU.copyTextureToTexture(\n\t\t\t{\n\t\t\t  texture: sourceGPU\n\t\t\t},\n\t\t\t{\n\t\t\t  texture: destinationGPU\n\t\t\t},\n\t\t\t[\n\t\t\t\ttexture.image.width,\n\t\t\t\ttexture.image.height\n\t\t\t]\n\t\t);\n\n\t\tdescriptorGPU.colorAttachments[ 0 ].loadOp = GPULoadOp.Load;\n\t\tif ( renderState.depth ) descriptorGPU.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\tif ( renderState.stencil ) descriptorGPU.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\n\t\trenderState.currentPassGPU = encoderGPU.beginRenderPass( descriptorGPU );\n\n\t}\n\n\tgetViewport( target ) {\n\n\t\tconst viewport = this._viewport;\n\n\t\ttarget.x = viewport.x;\n\t\ttarget.y = viewport.y;\n\t\ttarget.width = viewport.width;\n\t\ttarget.height = viewport.height;\n\t\ttarget.minDepth = viewport.minDepth;\n\t\ttarget.maxDepth = viewport.maxDepth;\n\n\t\treturn target;\n\n\t}\n\n\tsetViewport( x, y, width, height, minDepth = 0, maxDepth = 1 ) {\n\n\t\tif ( x === null ) {\n\n\t\t\tthis._viewport = null;\n\n\t\t} else {\n\n\t\t\tthis._viewport = {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tminDepth: minDepth,\n\t\t\t\tmaxDepth: maxDepth\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\tgetClearColor( target ) {\n\n\t\treturn target.copy( this._clearColor );\n\n\t}\n\n\tsetClearColor( color, alpha = 1 ) {\n\n\t\tthis._clearColor.set( color );\n\t\tthis._clearAlpha = alpha;\n\n\t}\n\n\tgetClearAlpha() {\n\n\t\treturn this._clearAlpha;\n\n\t}\n\n\tsetClearAlpha( alpha ) {\n\n\t\tthis._clearAlpha = alpha;\n\n\t}\n\n\tgetClearDepth() {\n\n\t\treturn this._clearDepth;\n\n\t}\n\n\tsetClearDepth( depth ) {\n\n\t\tthis._clearDepth = depth;\n\n\t}\n\n\tgetClearStencil() {\n\n\t\treturn this._clearStencil;\n\n\t}\n\n\tsetClearStencil( stencil ) {\n\n\t\tthis._clearStencil = stencil;\n\n\t}\n\n\tclear() {\n\n\t\tif ( this._background ) this._background.clear();\n\n\t}\n\n\tdispose() {\n\n\t\tthis._objects.dispose();\n\t\tthis._properties.dispose();\n\t\tthis._renderPipelines.dispose();\n\t\tthis._computePipelines.dispose();\n\t\tthis._nodes.dispose();\n\t\tthis._bindings.dispose();\n\t\tthis._info.dispose();\n\t\tthis._renderLists.dispose();\n\t\tthis._renderStates.dispose();\n\t\tthis._textures.dispose();\n\n\t\tthis.setRenderTarget( null );\n\t\tthis.setAnimationLoop( null );\n\n\t}\n\n\tsetRenderTarget( renderTarget ) {\n\n\t\tthis._renderTarget = renderTarget;\n\n\t}\n\n\tasync compute( ...computeNodes ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tconst device = this._device;\n\t\tconst computePipelines = this._computePipelines;\n\n\t\tconst cmdEncoder = device.createCommandEncoder( {} );\n\t\tconst passEncoder = cmdEncoder.beginComputePass();\n\n\t\tfor ( const computeNode of computeNodes ) {\n\n\t\t\t// onInit\n\n\t\t\tif ( computePipelines.has( computeNode ) === false ) {\n\n\t\t\t\tcomputeNode.onInit( { renderer: this } );\n\n\t\t\t}\n\n\t\t\t// pipeline\n\n\t\t\tconst pipeline = computePipelines.get( computeNode );\n\t\t\tpassEncoder.setPipeline( pipeline );\n\n\t\t\t// node\n\n\t\t\t//this._nodes.update( computeNode );\n\n\t\t\t// bind group\n\n\t\t\tconst bindGroup = this._bindings.getForCompute( computeNode ).group;\n\t\t\tthis._bindings.update( computeNode );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\n\t\t\tpassEncoder.dispatchWorkgroups( computeNode.dispatchCount );\n\n\t\t}\n\n\t\tpassEncoder.end();\n\t\tdevice.queue.submit( [ cmdEncoder.finish() ] );\n\n\t}\n\n\tgetRenderTarget() {\n\n\t\treturn this._renderTarget;\n\n\t}\n\n\thasFeature( name ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tthrow new Error( 'THREE.WebGPURenderer: Renderer must be initialized before testing features.' );\n\n\t\t}\n\n\t\t//\n\n\t\tconst features = Object.values( GPUFeatureName );\n\n\t\tif ( features.includes( name ) === false ) {\n\n\t\t\tthrow new Error( 'THREE.WebGPURenderer: Unknown WebGPU GPU feature: ' + name );\n\n\t\t}\n\n\t\t//\n\n\t\treturn this._adapter.features.has( name );\n\n\t}\n\n\t_projectObject( object, camera, groupOrder, renderList ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\trenderList.pushLight( object );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld ).applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = object.geometry;\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.' );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tconst geometry = object.geometry;\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\t\t\t_vector3\n\t\t\t\t\t\t\t.copy( geometry.boundingSphere.center )\n\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\trenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis._projectObject( children[ i ], camera, groupOrder, renderList );\n\n\t\t}\n\n\t}\n\n\t_renderObjects( renderList, camera, scene, lightsNode ) {\n\n\t\t// process renderable objects\n\n\t\tfor ( let i = 0, il = renderList.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\t// @TODO: Add support for multiple materials per object. This will require to extract\n\t\t\t// the material from the renderItem object and pass it with its group data to _renderObject().\n\n\t\t\tconst { object, geometry, material, group } = renderItem;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor ( let j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tconst vp = camera2.viewport;\n\t\t\t\t\t\tconst minDepth = ( vp.minDepth === undefined ) ? 0 : vp.minDepth;\n\t\t\t\t\t\tconst maxDepth = ( vp.maxDepth === undefined ) ? 1 : vp.maxDepth;\n\n\t\t\t\t\t\tthis._currentRenderState.currentPassGPU.setViewport( vp.x, vp.y, vp.width, vp.height, minDepth, maxDepth );\n\n\t\t\t\t\t\tthis._renderObject( object, scene, camera2, geometry, material, group, lightsNode );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis._renderObject( object, scene, camera, geometry, material, group, lightsNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_renderObject( object, scene, camera, geometry, material, group, lightsNode ) {\n\n\t\tmaterial = scene.overrideMaterial !== null ? scene.overrideMaterial : material;\n\n\t\t//\n\n\t\tobject.onBeforeRender( this, scene, camera, geometry, material, group );\n\n\t\t//\n\n\t\tconst renderObject = this._getRenderObject( object, material, scene, camera, lightsNode );\n\n\t\t//\n\n\t\tthis._nodes.updateBefore( renderObject );\n\n\t\t//\n\n\t\tconst passEncoder = this._currentRenderState.currentPassGPU;\n\t\tconst info = this._info;\n\n\t\t//\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t// updates\n\n\t\tthis._nodes.update( renderObject );\n\t\tthis._geometries.update( renderObject );\n\t\tthis._bindings.update( renderObject );\n\n\t\t// pipeline\n\n\t\tconst renderPipeline = this._renderPipelines.get( renderObject );\n\t\tpassEncoder.setPipeline( renderPipeline.pipeline );\n\n\t\t// bind group\n\n\t\tconst bindGroup = this._bindings.get( renderObject ).group;\n\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\n\t\t// index\n\n\t\tconst index = this._geometries.getIndex( renderObject );\n\n\t\tconst hasIndex = ( index !== null );\n\n\t\tif ( hasIndex === true ) {\n\n\t\t\tthis._setupIndexBuffer( index, passEncoder );\n\n\t\t}\n\n\t\t// vertex buffers\n\n\t\tthis._setupVertexBuffers( geometry.attributes, passEncoder, renderPipeline );\n\n\t\t// draw\n\n\t\tconst drawRange = geometry.drawRange;\n\t\tconst firstVertex = drawRange.start;\n\n\t\tconst instanceCount = geometry.isInstancedBufferGeometry ? geometry.instanceCount : ( object.isInstancedMesh ? object.count : 1 );\n\n\t\tif ( hasIndex === true ) {\n\n\t\t\tconst indexCount = ( drawRange.count !== Infinity ) ? drawRange.count : index.count;\n\n\t\t\tpassEncoder.drawIndexed( indexCount, instanceCount, firstVertex, 0, 0 );\n\n\t\t\tinfo.update( object, indexCount, instanceCount );\n\n\t\t} else {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst vertexCount = ( drawRange.count !== Infinity ) ? drawRange.count : positionAttribute.count;\n\n\t\t\tpassEncoder.draw( vertexCount, instanceCount, firstVertex, 0 );\n\n\t\t\tinfo.update( object, vertexCount, instanceCount );\n\n\t\t}\n\n\t}\n\n\t_getRenderObject( object, material, scene, camera, lightsNode ) {\n\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode );\n\t\tconst renderObjectProperties = this._properties.get( renderObject );\n\n\t\tif ( renderObjectProperties.initialized !== true ) {\n\n\t\t\trenderObjectProperties.initialized = true;\n\n\t\t\tconst dispose = () => {\n\n\t\t\t\tthis._renderPipelines.remove( renderObject );\n\t\t\t\tthis._nodes.remove( renderObject );\n\t\t\t\tthis._properties.remove( renderObject );\n\n\t\t\t\tthis._objects.remove( object, material, scene, camera, lightsNode );\n\n\t\t\t\trenderObject.material.removeEventListener( 'dispose', dispose );\n\n\t\t\t};\n\n\t\t\trenderObject.material.addEventListener( 'dispose', dispose );\n\n\t\t}\n\n\t\tconst cacheKey = renderObject.getCacheKey();\n\n\t\tif ( renderObjectProperties.cacheKey !== cacheKey ) {\n\n\t\t\trenderObjectProperties.cacheKey = cacheKey;\n\n\t\t\tthis._renderPipelines.remove( renderObject );\n\t\t\tthis._nodes.remove( renderObject );\n\n\t\t}\n\n\t\treturn renderObject;\n\n\t}\n\n\t_setupIndexBuffer( index, encoder ) {\n\n\t\tconst buffer = this._attributes.get( index ).buffer;\n\t\tconst indexFormat = ( index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\tencoder.setIndexBuffer( buffer, indexFormat );\n\n\t}\n\n\t_setupVertexBuffers( geometryAttributes, encoder, renderPipeline ) {\n\n\t\tconst shaderAttributes = renderPipeline.shaderAttributes;\n\n\t\tfor ( const shaderAttribute of shaderAttributes ) {\n\n\t\t\tconst name = shaderAttribute.name;\n\t\t\tconst slot = shaderAttribute.slot;\n\n\t\t\tconst attribute = geometryAttributes[ name ];\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tconst buffer = this._attributes.get( attribute ).buffer;\n\t\t\t\tencoder.setVertexBuffer( slot, buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_setupColorBuffer() {\n\n\t\tconst device = this._device;\n\n\t\tif ( device ) {\n\n\t\t\tif ( this._colorBuffer ) this._colorBuffer.destroy();\n\n\t\t\tthis._colorBuffer = this._device.createTexture( {\n\t\t\t\tlabel: 'colorBuffer',\n\t\t\t\tsize: {\n\t\t\t\t\twidth: Math.floor( this._width * this._pixelRatio ),\n\t\t\t\t\theight: Math.floor( this._height * this._pixelRatio ),\n\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t},\n\t\t\t\tsampleCount: this._parameters.sampleCount,\n\t\t\t\tformat: GPUTextureFormat.BGRA8Unorm,\n\t\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t_setupDepthBuffer() {\n\n\t\tconst device = this._device;\n\n\t\tif ( device ) {\n\n\t\t\tif ( this._depthBuffer ) this._depthBuffer.destroy();\n\n\t\t\tthis._depthBuffer = this._device.createTexture( {\n\t\t\t\tlabel: 'depthBuffer',\n\t\t\t\tsize: {\n\t\t\t\t\twidth: Math.floor( this._width * this._pixelRatio ),\n\t\t\t\t\theight: Math.floor( this._height * this._pixelRatio ),\n\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t},\n\t\t\t\tsampleCount: this._parameters.sampleCount,\n\t\t\t\tformat: GPUTextureFormat.Depth24PlusStencil8,\n\t\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t_configureContext() {\n\n\t\tconst device = this._device;\n\n\t\tif ( device ) {\n\n\t\t\tthis._context.configure( {\n\t\t\t\tdevice: device,\n\t\t\t\tformat: GPUTextureFormat.BGRA8Unorm,\n\t\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n\t\t\t\talphaMode: 'premultiplied'\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t_createCanvasElement() {\n\n\t\tconst canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\n\t}\n\n}\n\nexport default WebGPURenderer;\n"],
  "mappings": "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",
  "names": ["texture", "texture", "renderer", "scene", "texture", "texture", "texture", "texture", "uniformNode", "context", "texture"]
}
